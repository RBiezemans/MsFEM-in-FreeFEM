// Compute eference solution for MsFEM tests
// run with   ff-mpirun -np 1 main_REF.edp  
load "MUMPS"

string name = "REF";
string nameMPI = ""; //empty string for compatibility with init.idp
string bcType = ""; //empty string for compatibility with init.idp

int iproc=0, nbproc=1; //defined for compatibility with init.idp in the case of parallel computing

include "./msfem_blocks/init.idp" // defines bilinear form, RHS, global P1 space Vh on the fine mesh
name = "REF"; // undo adaptations due to method settings

Vh uh,vh; //the global problem is formulated on a standard FE basis !

// BC need to be set depending on the type of FE used
solve pb(uh,vh, solver=sparsesolver)=int2d(Th)(aref(uh,vh)) + int1d(Th)(tgv*uh*vh)
            - int2d(Th)(fRHS*vh);

if (plots) plot(uh,value=1,wait=1,cmm="P1 solution on a global fine mesh");

{
    string solname = "sol_" + name + parametersFine + ".txt";
    ffLog << "Writing reference solution to " << solname << endl; 
    ofstream ff(solname);
    ff << uh[] << endl;
    ff << endl;
}

printTime("Computation of the reference solution lasted ")
ffLog << endl; //end of reference computations
cout << endl;

varf pbSolved(unused,vh)=int2d(Th)(aref(uh,vh)) + int1d(Th)(tgv*uh*vh)
            - int2d(Th)(fRHS*vh);
real[int] res(Vh.ndof), rhs(Vh.ndof);
res=pbSolved(0,Vh); //compute residue
uh=0; //remove solution from system to compute the right-hand side only
rhs=pbSolved(0,Vh);
real resNorm=sqrt(res'*res);
real rhsNorm=sqrt(rhs'*rhs);
resNorm=resNorm/rhsNorm;
ffRes << "The reference solution is computed with residue " << resNorm << endl << endl;