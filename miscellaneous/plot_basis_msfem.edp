///////////////////////////////////////////////////////////////////////
// Some additional parameters that are used during code development  //
int debug=0; //display/hide intermediate output                      //
int plotBubbles=0; //show plots of numerical correctors and bubbles  //
int plots=1; //display/hide basic input and output plots             //
int timing=0; //time certain steps in oversampling methods           //
///////////////////////////////////////////////////////////////////////


// Outfile stream for process output
ofstream ffLog("log_msfem.txt", append);


exec("mkdir -p basis");

///////////////////////////////////////////////////////////////////////
// Parameters                                                        //
///////////////////////////////////////////////////////////////////////

string FEtype="CR";

// Parameters defining the coarse mesh
int n=2, nx=n, ny=n;
real L=n*0.0625, Lx=L, Ly=L;
// Parameters defining the fine mesh
int Ndiscr=n*128, Nx=Ndiscr, Ny=Ndiscr;
// Parameters defining the PDE
real eps=0.0078125, alpha=0.03125, theta=0.15, cont=7, osCoef=0;
//theta: angle of the advection field
//cont: contrast of the multiscale coefficient
real osThr=0.5;
//threshold to decide whether oversampling is to be employed
// Parameters tuning the MsFEM method
int strongDir=0, useB=0, testMS=1;
string glue="dof", treatB="in_system";

int nbproc=1;
string basisDir="basis";
real time=0;

// macro residue(mat,rhs,sol,message) {
//     real[int] res=mat*sol;
//     res=res-rhs;
//     real resNorm=sqrt(res'*res);
//     real rhsNorm=sqrt(rhs'*rhs);
//     resNorm=resNorm/rhsNorm;
//     cout << message << resNorm << endl;
// } // EOM


///////////////////////////////////////////////////////////////////////
// Define the global coarse and fine meshes and numerical parameters //
///////////////////////////////////////////////////////////////////////

// Coarse mesh TH
real Hx=Lx/nx, Hy=Ly/ny;
mesh TH=square(nx,ny,[Lx*x,Ly*y]);
fespace VH0(TH,P0); //piecewise constant FE space on coarse mesh
VH0 phi=0; //pw constant function to loop over coarse mesh elements
VH0 xb,yb;
xb=x; yb=y; //interpolate and stock the coordinates of the barycentre for each triangle

// Fine mesh Th
real hx=Lx/Nx, hy=Ly/Ny;
int[int] labs=[-1,-1,-1,-1]; //this label is useful to construct CR elements, but we do not use the global boundary now
mesh Th=square(Nx,Ny,[Lx*x,Ly*y], label=labs);
fespace Vh(Th,P1); //fine global FE space


///////////////////////////////////////////////////////////////////////
// Define the PDE                                                    //
///////////////////////////////////////////////////////////////////////

// Diffusion coefficient
real delta = (cont-1.)/(cont+1.);
func nu=alpha*(1+delta*cos(2*pi/eps*x));
// func nu=alpha*(1+delta*cos(2*pi/eps*x))*(1+delta*sin(0.2*pi/eps*y)) + 5*alpha*( (x-3*Lx/8)^2 + (y-5*Ly/8)^2 < 0.004*Lx^2 ) + 5*alpha*( (x-3*Lx/4)^2 + (y-Ly/2)^2 < 0.008*Lx^2 );
// func nu=alpha*(1+cont*cos(pi/eps*x)^2*sin(pi/eps*y)^2);
// Advection field
real bx=cos(2*pi*theta);
real by=sin(2*pi*theta);
// Divergence of the advection field
func sigma=0; 
 
macro adif(u,v) (dx(u)*dx(v)*nu+dy(u)*dy(v)*nu)// EOM
//bilinear form associated to diffusion
macro aadv(u,v) ( v*(  bx*dx(u)+by*dy(u) ) )// EOM
//bilinear form associated to advection
macro aadvAdj(u,v) ( u*(  bx*dx(v)+by*dy(v) ) )// EOM
//bilinear form associated to an adjoint advection term
macro amass(u,v) (u*v*sigma)// EOM
//bilinear form associated to mass/reaction terms

// Load the variational formulation of the global and local problems
// (macros must be called aComplete and aBasis, respectively)
int useVc=1; //can be set to zero if aBasis(1,w)==0 for all test functions w
int fullVF=1; //can be set to zero if all terms with gradients on u vanish from the effective VF
VH0 tau=0; //a stabilization parameter can be defined in the vffile
int stabilization=0; //to be set to 1 if stabilization terms are to be used in the RHS
macro asupg(u,v) (tau*( (bx*dx(u)+by*dy(u))*(bx*dx(v)+by*dy(v)) ))// EOM
//bilinear form for supg stabilization
string stabExpression="-- Stabilization parameter = unused --"; //can be specified in vffile if relevant
string vfname="no_VF_provided"; //string to characterize the output directory for MsFEM results
include "../variational_forms/advection_diffusion_direct.idp"
if (fullVF==0) assert(useVc==0);
if (stabilization==1) assert(useB==0); //supg with bubbles is not supported

// RHS of the PDE to be solved
// func fRHS=2+sin(2*pi*x)+x*cos(2*pi*y);
// string rhsDescription = "-- Tests for RHS f = 2+sin(2pi x)+x*cos(2pi y) --";
  //string used to document the tests performed in the error file
// func fRHS=sin(x)*sin(y);
// string rhsDescription = "-- Tests for RHS f = sin(x)sin(y) --";
// VH0 fRHS; for (int i=0; i<VH0.ndof; i++) fRHS[][i]=1+i;
// string rhsDescription = "-- Tests for RHS f[][i] = 1+i";
func fRHS=1;
string rhsDescription = "-- Tests for RHS f = 1 --";

// Stabilization to be used at the RHS of the variational problem
macro rhssupg(v) (fRHS * tau * (bx*dx(v)+by*dy(v)))// EOM

if (plots) { //plot of diffusion coefficient
	Vh nuh = nu;
	plot(nuh, cmm="Diffusion coefficient", wait=1, fill=1, value=1);
}


///////////////////////////////////////////////////////////////////////
// Define internal data structures                                   //
///////////////////////////////////////////////////////////////////////

int ndofOffline;
{
    //obtain the number of DOF for the discretization of each coarse element
    phi[][0]=2;
    mesh K=trunc(Th,phi>1,split=1);
    fespace VK(K,P1);
    ndofOffline=VK.ndof;
	phi[][0]=0;
}

// Data structures to store offline computations, to be re-used in the reconstruction phase
int storeLen = VH0.ndof/nbproc;
if (VH0.ndof%nbproc>0) {
	storeLen += 1; //correction for round-off
}
real[int,int] storeVx(storeLen,ndofOffline); storeVx=0;
real[int,int] storeVy(storeLen,ndofOffline); storeVy=0;
real[int,int] storeB(storeLen,ndofOffline); storeB=0;


///////////////////////////////////////////////////////////////////////
// Construction of multiscale basis                                  //
///////////////////////////////////////////////////////////////////////

include "../msfem_blocks/tools.idp" //load some functions and macros for OS

for(int i=0; i<VH0.ndof; i++) {
    cout <<"construction ms coefficients on tri "<<i<<endl;
    phi[][i]=2; 

    if (osCoef < osThr) {  //compute numerical correctors, bubble functions on K
        //osCoef is larger than osThr if oversampling should be used
        if (FEtype=="Lin") {
            include "../msfem_blocks/local_problems_LIN.idp"
            storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; if (useB) storeB(i,:)=B[];
        }
        else if (FEtype=="CR") {
            include "../msfem_blocks/local_problems_CR.idp"
            storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; if (useB) storeB(i,:)=B[];
        }
        // Save (internally) the offline computations on K
        // Compute effective coefficient on K
        // include "msfem_blocks/offline_effective_tensors.idp"
    } else { //OS case
        if (FEtype=="Lin") {
            include "../msfem_blocks/local_problems_LIN_OS.idp"
            storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; if (useB) storeB(i,:)=B[];
        }
        else if (FEtype=="CR") {
            include "../msfem_blocks/local_problems_CR_OS.idp"
            storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; if (useB) storeB(i,:)=B[];

        }
        // Save (internally) the offline computations on K
        // Compute effective coefficient on K
        // include "msfem_blocks/offline_effective_tensors.idp"
    }
    

    if (debug) if (i%(2*n)==0) cout << endl;
    phi[][i]=0;
}


real[int] colorhsv=[ // color hsv model
   1./6., 0.1216 , 1., // LightYellow
   //1./12., 0.3031 , 1., // LightOrange
   38./360., 1. , 1., // Orange
   //0., 0.75, 1., // Coral Red
   1./72., 0.75 , 0.86// Google Red
   //1./180., 1., 1. // Candy Apple Red
   //1, 1. , 1, // red
   //7./12., 0.48, 0.71, // dark blue
   //5./6., 0.85, 0.79 // dark blue
   ];


macro reconstruct(uH,bubbleValue) {
    /*(plot(TH,uH,wait=1,cmm="Coarse basis function", hsv=colorhsv, fill=1);*/
    plot(TH,uH,wait=1, hsv=colorhsv, fill=1,ps="basis_fem.eps");
    Vh uHh=0; /*for the reconstructed basis functions*/
    Vh uBh=0; /*reconstruction of bubble functions*/
    Vh uHhB=0; /*reconstruction with a bubble function*/
    VH0 uH0=uH; /*interpolation of uH at barycentres to facilitate local reconstructions*/
    VH0 uHdx=dx(uH), uHdy=dy(uH); /*interpolation of derivatives of uH (which in fact are piecewise constant)*/

    for(int i=0; i<VH0.ndof; i++) {
        cout <<"reconstruction on tri "<<i<<endl;
        phi[][i]=2;
        int[int] n2o;
        mesh K=trunc(Th,phi>1,split=1,new2old=n2o);
        fespace VK(K,P1);
        fespace VK0(K,P0);
        
        VK uHK;
        uHK=uH0[][i] + uHdx[][i]*(x-xb[][i]) + uHdy[][i]*(y-yb[][i]);
        real[int] uHhK=uHK[];  /*array currently representing the coarse solution on K*/
        uHhK+=uHdx[][i]*storeVx(i,:);
        uHhK+=uHdy[][i]*storeVy(i,:);
        int[int] R=restrict(VK, Vh, n2o);
        uHh[](R)=uHhK;

        if (abs(uH0[][i]) > K.measure/100) {
            real[int] BKh = storeB(i,:);
            BKh = bubbleValue*BKh;
            uHhK+=BKh;
            uBh[](R)=BKh;
        }
        uHhB[](R)=uHhK;

        phi[][i]=0;
    }
    /*plot(TH, uHh, wait=1, cmm="Reconstruction of basis function", fill=1, value=0, hsv=colorhsv);*/
    plot(TH, uHh, wait=1, fill=1, value=0, hsv=colorhsv, ps="basis_msfem.eps");
    /*plot(TH, uBh, wait=1, cmm="Reconstruction of basis function", fill=1, value=1);*/
    /*plot(TH, uHhB, wait=1, cmm="Reconstruction of basis function + bubbles", fill=1, value=1);*/
} // EOM

real basisValue=0.05;
if (FEtype=="Lin") {
    fespace VH(TH,P1); 
    VH uH=0; 
    for (int i=4; i<5; i++) {
        uH[][i]=1;
        reconstruct(uH,1./basisValue)
        uH[][i]=0;
    }
    uH=x*basisValue;
    //reconstruct(uH,1./basisValue)
}
else if (FEtype=="CR") {
    fespace VH(TH,P1nc); 
    VH uH=0; 
    for (int i=4; i<5; i++) {
        uH[][i]=1;
        reconstruct(uH,1./basisValue)
        uH[][i]=0;
    }
    uH=x*basisValue;
    //reconstruct(uH,1./basisValue)
}
