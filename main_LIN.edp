// main_LIN.edp
//
// run with   FreeFEM++ main_LIN.edp -o [offline_mode]
//            -o specifies the option for the offline stage: either "compute" (default) or "load"
// The user must ensure at all times that the appropriate mode is used for correct results
//
// Computation of a numerical approximation to the PDE defined in init.idp
// by the adv-MsFEM-LIN method
// Over-sampling is used if the parametervalue osCoef is larger than 0.5
//
// Sequential version
//
// Parameters are read from parameters.txt
//
// 
// This file INCLUDES
// - init.idp to read parameters and initialize all objects needed for the MsFEM
// - local_problems_LIN.idp to execute local computations for the adv-MsFEM-LIN..
//   ..(numerical correctors and bubble functions) on a single coarse mesh element
// - tools_CR_and_OS.idp for local_problems_LIN_OS.idp to be included properly
// - local_problems_LIN_OS.idp to execute local computations for the adv-MsFEM-LIN..
//   ..on a single coarse mesh element with oversampling
// - offline_effective_tensors.idp to compute the effective coefficients on a..
//   ..single coarse mesh element
// - offline_save_effective_tensors.idp to save the effective coefficient
// - offline_load.idp to replace the offline phase if it can be preloaded
// - online.idp to construct and solve the (effective) macroscopic system
// - post.idp to create the output (reconstrucing the fine scale solution,.. 
//   ..saving the coarse solution, reconstructed solution, errors)
//
// This file CREATES for later use in the MsFEM:
//  bcType -- a string to set the correct boundary conditions in the macroscopic..
//            ..problem (Lin/CR) 
//  name[MPI] -- basic information about the MsFEM routine that is executed
//  VH -- the relevant P1 space for the macroscopic problem


// INITIALIZATION
string bcType = "Lin"; //type of boundary condtitions, relevant for the macroscopic problem
string name = bcType; //accronyme for the adv-MsFEM-LIN
string nameMPI = ""; //nothing is added to name later, indicating no usage of parallel code

int iproc=0, nbproc=1; //defined for compatibility with init.idp, that is also compatible with parallel computations

include "msfem_blocks/init.idp"
// Build directories to save the results from the upcoming offline phase
{
    string createDir = "mkdir -p " + output;
    exec(createDir); //directory where all output is stored
    createDir = "mkdir -p " + basisDir;
    exec(createDir); //directory to store numerical correctors and bubble functions
    createDir = "mkdir -p " + coeffDir;
    exec(createDir); //directory to store the effective coefficients for the MsFEM
}

include "msfem_blocks/tools_CR_and_OS.idp" //load some functions and macros for OS


// OFFLINE PHASE
// Computation of numerical correctors and bubble functions per coarse mesh element
// Also takes care of the computation of the discrete RHS
// VH0 is the P0 space on the coarse mesh -- created in init.idp
// Data structures storeVx, storeVy, store B were created in init.idp
if (offlineMode == "compute") {
    for(int i=0; i<VH0.ndof; i++) {
        if (i%(2*n)==0) cout <<"construction ms coefficients on tri "<<i<<endl;
        phi[][i]=2; //created in init.idp -- used to loop over the coarse mesh elements

        if (osCoef < osThr) {  //compute numerical correctors, bubble functions on K
            //osCoef is larger than osThr if oversampling should be used
            include "msfem_blocks/local_problems_LIN.idp"
            // Save (internally) the offline computations on K
            storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; if (useB) storeB(i,:)=B[];
            // Compute effective coefficient on K
            include "msfem_blocks/offline_effective_tensors.idp"
        } else { //OS case
            include "msfem_blocks/local_problems_LIN_OS.idp"
            // Save (internally) the offline computations on K
            storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; if (useB) storeB(i,:)=B[];
            // Compute effective coefficient on K
            include "msfem_blocks/offline_effective_tensors.idp"
        }
        

        if (debug) if (i%(2*n)==0) cout << endl;
        phi[][i]=0;
    }
    include "msfem_blocks/offline_save_effective_tensors.idp" //save effective coefficient (for the entire coarse mesh)
} else if (offlineMode == "load") {
    include "msfem_blocks/offline_load.idp"
}


// ONLINE PHASE -- solving the effective problem
fespace VH(TH,P1); //coarse global FE space
include "msfem_blocks/online.idp"
// the P1 solution is (VH) uH, the bubble coefficients are in (VH0) uB

// POST-PROCESSING -- reconstruction, error computation, documentation
include "msfem_blocks/post.idp"
