// main_LIN.edp
//
// run with   FreeFem++ main_LIN.edp -o [offline_mode]
//            -o specifies the option for the offline stage: either "compute" (default) or "load"
// The user must ensure at all times that the appropriate mode is used for correct results
//
////// Sequential version //////////////////////////////////////////////


// Initialization
string bcType = "Lin"; //type of boundary condtitions, relevant for the macroscopic problem
string name = bcType; //abbreviation used for the MsFEM output
s// MPI compatibility
string nameMPI = ""; //nothing is added to name later, indicating no usage of parallel code
int iproc=0; //sequential code only uses a single process, which corresponds to the main process
int nbproc=1; 
// The next macro is defined for compatibility with some macros that are loaded for parallel MsFEM,
//  but it should never actually be executed for sequential MsFEM
macro mpiReduce(a,b,c,d) cout << "WARNING: mpiReduce was erroneously called with sequential MsFEM" << endl //EOM 

include "msfem_blocks/init.idp"
fespace VH(TH,P1); //coarse global FE conforming P1 space


// Offline stage
if (offlineMode == "compute") 
{
    for(int i=0; i<VH0.ndof; i++) 
    {
        if (i%(2*n)==0) {cout <<"construction ms coefficients on tri "<<i<<endl;}
        if (osCoef < osThr) 
        {//oversampling is used iff osCoef is larger than osThr
            localProblemsLIN(i,i)
        } 
        else 
        { //OS case
            localProblemsLINOS(i,i)
        }
        if (debug) if (i%(2*n)==0) cout << endl;
    }
    // Reduction is needed for compatibility between offline stages for both parallel and sequential versions
    offlineEffectiveTensorsReduce
    // Save effective coefficients (for the entire coarse mesh)
    // Also save the Vc pattern over all coarse mesh elements
    offlineSaveEffectiveTensors 
    printTime("Offline phase (computing + storing) lasted ")
} 
else if (offlineMode == "load") 
{
    offlineLoad
}

// Online stage
VH uH=0; //the global problem is formulated on a standard FE P1-basis
VH0 uB=0; //coefficients to be used for the bubble function per mesh element
solveGlobalProblem(uH,uB)

// Post-processing
postReconstructionError(uH,uB) //error computation
postCoarseError(uH) //error computation of projections on the coarse space
