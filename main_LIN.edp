// main_LIN.edp
//
// run with   FreeFem++ main_LIN.edp -o [offline_mode]
//            -o specifies the option for the offline stage: either "compute" (default) or "load"
// The user must ensure at all times that the appropriate mode is used for correct results
//
// Computation of a numerical approximation to the PDE defined in init.idp
// by the MsFEM-LIN method based on the "vffile.idp" for local and global problems
// -- Over-sampling is used if the parametervalue osCoef is larger than osThr
//    (only DOF-continuous correctors and bubbles are supported)
// -- Bubble functions can be added to or omitted from the approximation space, and can be 
//    included in the linear system or carry the average of fRHS as coefficient.
//
// Parameters are read from parameters.txt
// Local and global variational forms are read from vffile.idp
//
// 
////// Sequential version //////////////////////////////////////////////
//
//
// Global variables declared in this script ////////////////////////////
// - (string)  bcType -- a string to set the correct boundary conditions in the macroscopic problem (Lin/CR) 
// - (string)  name -- abbreviation for  MsFEM underlying affine space
// - (string)  nameMPI -- must be empty for sequential script; "_MPI" for parallel script
// - (int)     iproc -- index of the current process (always 0 for sequential script)
// - (int)     nbproc -- number of processes (always 1 for sequential script)
// - (fespace) VH -- the relevant P1 space for the macroscopic problem
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
// INITIALIZATION                                                    //
// (msfem_blocks/init.idp)                                           //
///////////////////////////////////////////////////////////////////////
string bcType = "Lin"; //type of boundary condtitions, relevant for the macroscopic problem
string name = bcType; //abbreviation used for the MsFEM output
string nameMPI = ""; //nothing is added to name later, indicating no usage of parallel code

int iproc=0, nbproc=1; //defined for compatibility with init.idp, that is also compatible with parallel computations

include "msfem_blocks/init.idp"


///////////////////////////////////////////////////////////////////////
// OFFLINE STAGE                                                     //
// (msfem_blocks/local_problems_LIN[_OS].idp                         //
//  or msfem_blocks/offline_load.idp)                                //
// (msfem_blocks/offline_effective_tensors.idp)                      //
// (msfem_blocks/offline_save_effective_tensors.idp)                 //
///////////////////////////////////////////////////////////////////////
// -- Computation of numerical correctors V[c/x/y] and bubble function B per coarse mesh element
// -- The discrete RHS is also computed via the inclusion of msfem_blocks/offline_effective_RHS.idp in the files for the offline stage
// -- Data structures storeVx, storeVy, store B are declared in init.idp
if (offlineMode == "compute") 
{
    for(int i=0; i<VH0.ndof; i++) {
        if (i%(2*n)==0) {
            cout <<"construction ms coefficients on tri "<<i<<endl;
            // ffLog <<"construction ms coefficients on tri "<<i<<endl;
        }
        phi[][i]=2; //initialized in init.idp -- used to loop over the coarse mesh elements

        if (osCoef < osThr) {//oversampling is used iff osCoef is larger than osThr
            include "msfem_blocks/local_problems_LIN.idp"
            // Save (internally) the offline computations on K
            if (useVcOnK[i]) storeVc(i,:)=Vc[];
            storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; 
            if (useB) storeB(i,:)=B[];
            // Compute effective coefficient on K
            include "msfem_blocks/offline_effective_tensors.idp"
        } else { //OS case
            include "msfem_blocks/local_problems_LIN_OS.idp"
            // Save (internally) the offline computations on K
            if (useVcOnK[i]) storeVc(i,:)=Vc[];
            storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; 
            if (useB) storeB(i,:)=B[];
            // Compute effective coefficient on K
            include "msfem_blocks/offline_effective_tensors.idp"
        }
        

        if (debug) if (i%(2*n)==0) cout << endl;
        phi[][i]=0;
    }
    include "msfem_blocks/offline_save_effective_tensors.idp" //save effective coefficients (for the entire coarse mesh)
    //also save the Vc pattern over all coarse mesh elements
} 
else if (offlineMode == "load") 
{
    include "msfem_blocks/offline_load.idp"
}

printTime("Offline phase (computing + storing) lasted ")

///////////////////////////////////////////////////////////////////////
// ONLINE STAGE                                                      //
// (msfem_blocks/online.idp)                                         //
///////////////////////////////////////////////////////////////////////
// -- Solving the effective problem  
fespace VH(TH,P1); //coarse global FE conforming P1 space
include "msfem_blocks/online.idp"
// the P1 solution is stored in (VH) uH, the bubble coefficients in (VH0) uB


///////////////////////////////////////////////////////////////////////
// POST-PROCESSING                                                   //
// (msfem_blocks/post.idp)                                           //
// (msfem_blocks/write_results.idp)                                  //
///////////////////////////////////////////////////////////////////////
// -- Reconstruction, error computation, documentation
include "msfem_blocks/post.idp"
include "msfem_blocks/write_results.idp"
