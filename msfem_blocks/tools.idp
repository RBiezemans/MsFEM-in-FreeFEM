// tools.idp
//
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //
// Short macros with various functionalities
// To be loaded inside init.idp
//
///////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////
//////////                                                                           ////////// 
//////////   Read/write to external files                                            ////////// 
//////////                                                                           ////////// 
///////////////////////////////////////////////////////////////////////////////////////////////

// Read the reference solution //
// target = FE function in which the reference solution will be stored
macro loadRef(target) {
    string refname = "sol_REF" + parametersFine + ".txt";
    ifstream ff(refname);
    ff>>target[];
} // EOM

// Read the projection of the reference solution on the coarse space in use //
// target = FE function in which the reference solution are stored
macro loadCoarse(target) {
    string refname = "sol_REF_" + bcType + "/solCoarse_REF" + parametersFine + "_n_" + n + ".txt";
    ifstream ff(refname);
    ff>>target[];
} // EOM

// Read a basis function //
// filename = file name of basis function in the basis directory
// storage = vector of the FE function in which the basis function is stored
macro readBasis(filename,storage) {
    string basisFile = basisDir + filename; 
    ifstream ffbasis (basisFile); 
    real[int] vec(ndofOffline);
    ffbasis >> vec;
    storage=vec;
} // EOM

// Write a file to the effective coefficient directory //
// filename = file name of for the effective coefficient in the coefficient directory
// vec = P0 FE function representing the effective coefficient
macro writeVec2File(filename,vec) {
    string matrixFile = coeffDir + filename; 
    ofstream ffmat (matrixFile); 
    ffmat << vec;
} // EOM

// Read a saved effective coefficient //
// filename = file name of for the effective coefficient in the coefficient directory
// vec = vector fo the P0 function in which the effective coefficient is stored
macro readFile2Vec(filename,vec) {
    string matrixFile = coeffDir + filename; 
    ifstream ffmat (matrixFile); 
    ffmat >> vec;
} // EOM


///////////////////////////////////////////////////////////////////////////////////////////////
//////////                                                                           ////////// 
//////////   Various small routines                                                  //////////
//////////                                                                           ////////// 
///////////////////////////////////////////////////////////////////////////////////////////////

// Compute the residue of the numerical solution to a linear system //
// mat = matrix of the linear system
// rhs = vector on the right of the linear system
// sol = vector solution to the linear system
// residue = real to which the residue is stored
macro residue(mat,rhs,sol,residue) {
real[int] res=mat*sol;
    res=res-rhs;
    real resNorm=sqrt(res'*res);
    real rhsNorm=sqrt(rhs'*rhs);
    residue=resNorm/rhsNorm;
} // EOM

// Write residue to output (cout and the msfem log file) //
// residue = real with the value of the residue to be written
// message = string printed before the residue
macro writeResidue(residue,message) {
    cout << message << residue << endl;
	ffLog << message << residue << endl;
} // EOM

// Write time elapsed since the last time measurement to msfem log file //
// message = string printed before the elapsed time
macro printTime(message) {
	real timeLapse = clock()-time;
	ffLog << message << timeLapse << "s" << endl;
	time=clock();
}
// EOM

// Reset all errors and norms of the reference solution on the current process to 0 //
macro resetNormsErrors() {
    nL1=0;   nL2=0;   nH1=0;   nMax=0;
    eL1=0;   eL2=0;   eH1=0;   eMax=0; 
    eML1=0;  eML2=0;  eMH1=0;  eMMax=0;
    eOL1=0;  eOL2=0;  eOH1=0;  eOMax=0;
    erL1=0;  erL2=0;  erH1=0;  erMax=0;
    erML1=0; erML2=0; erMH1=0; erMMax=0;
    erOL1=0; erOL2=0; erOH1=0; erOMax=0;
} // EOM


///////////////////////////////////////////////////////////////////////////////////////////////
//////////                                                                           ////////// 
//////////   Geometric tools and building oversampling patches                       //////////
//////////                                                                           ////////// 
///////////////////////////////////////////////////////////////////////////////////////////////

// Save the coordinates of the vertices of a coarse mesh element to a matrix //
// i = index of the mesh element in the coarse mesh TH
// KK = 3x2 matrix in which the coordinates are stored
macro saveVertexCoordinates(i,KK) {
    for(int kk=0; kk<3; kk++) {
        KK(kk,0) = TH[i][kk].x;
        KK(kk,1) = TH[i][kk].y;
    }
} // EOM

// Construct unit outward normals for a given triangle //
// pp = 3x2 matrix containing the coordinates of the vertices of the triangle
// if p_0 = (x_0, y_0) and p_1 = (x_1, y_1), 
// then the normal opposite p_3 constructed here is parallel to (and points in the same direction as)
//   n =  / (y_1 - y_0) \
//        \-(x-1 - x_0) /
func real[int,int] consNormals(real[int,int] & pp) {
    real[int,int] normals(3,2); normals=0;
    for(int k=0; k<3; k++) {
        normals(k,0) =  ( pp((k+2)%3,1) - pp((k+1)%3,1) );
        normals(k,1) = -( pp((k+2)%3,0) - pp((k+1)%3,0) );
        real len = sqrt(normals(k,0)^2 + normals(k,1)^2);
        normals(k,:) = normals(k,:)/len;
    }
    return normals;
}

// Compute integrals over selected edge of triangles //
// S = mesh of the triangle over which is integrated
// label = FeeFEM label indicating over what type of boundary is integrated
//  - Throughout our code, we mostly adopt the following conventions:
//  - label==-1  =>  edge is selected iff on the boundary of global domain
//  - label== 1  =>  edge is selected iff not on the boundary of global domain
// normS = 3x2 matrix containing the normals of the edges of the triangle
// edg = index of the normal in normS corresponding to the selected edge
// fnc = function to be integrated
macro edgeIntegral(S,label,normS,edg,fnc) (int1d(S,label)( (ip(N.x,N.y,normS(edg,:))>0.99) *fnc))// EOM

// Write integrals of a function over all edges of a triangle to command line //
// K = mesh of the triangle over which is integrated
// normS = 3x2 matrix containing the normals of the edges of the triangle
// fnc = function to be integrated
macro printIntegralsTri(K,normS,fnc) {
    cout << "Integrals on K: ";
    for (edg=0; edg<3; edg++) {
        real toprint = edgeIntegral(K,1,normS,edg,fnc) + edgeIntegral(K,-1,normS,edg,fnc);
        cout << toprint << "  ";
    }
    cout << endl;
} // EOM

// Compute inner product of the vector (u,v) with a vector (w[0],w[1]) //
// u = 1st component of the 1st vector (real)
// v = 2nd component of the 1st vector (real)
// w = 2nd vector (real[2])
macro ip(u,v,w) (u*w[0] + v*w[1])// EOM 

// Check if (x,y) - u2 points in the same direction as a normal vector u1 //
// A positive value means that this condition is indeed satisfied //
// u1 = vector of the desired direction (real[2])
// u2 = point in x,y-space (real[2])
macro ipcheck(u1, u2) ( u1[0]*(x-u2[0]) + u1[1]*(y-u2[1]) )// EOM


// Build the oversampling patch //
// !!! This macro was developed and testing only for meshes using the flags=0 option in FreeFEM
// Kx = 3x2 matrix containing the coordinates of the vertices of the triangle whose oversampling patch is built
// i = index of the triangle whose oversampling patch is built in the global coarse mesh TH
// normS = 3x2 matrix containing the normals of the edges of the triangle whose oversampling patch is built
// S = mesh variable to which the oversampling patch will be stored
macro buildOversamplingPatch(Kx,i,normS,S) {
    real[int,int] Sx(3,2); /* compute coordinates for the ideal oversampling patch by homothety */
    for(int kk=0; kk<3; kk++) {
        Sx(kk,0) = (osCoef)*(Kx(kk,0) - xb[][i]) + xb[][i];
        Sx(kk,1) = (osCoef)*(Kx(kk,1) - yb[][i]) + yb[][i];
    }

    if (timing) {
        cout << "Defining the ideal patch and its normals lasted " << clock()-time << " s" << endl;
        time=clock();
    }

    /* Construction of a patch-container C around S that is (much) smaller than Omega */
    int NxC = Nx/nx;
    int NyC = Ny/ny;

    real xCL = (floor(Sx(:,0).min/hx)-1)*hx; /* we take a small margin around the vertices of S as computed above */
    xCL = max(0.,xCL); /* ensure that the patch-container is a subset of the global domain */
    real xCR = (ceil(Sx(:,0).max/hx)+1)*hx;
    xCR=min(Lx, xCR);
    real yCL = (floor(Sx(:,1).min/hy)-1)*hy;
    yCL = max(0., yCL);
    real yCR = (ceil(Sx(:,1).max/hy)+1)*hy;
    yCR = min(Ly, yCR);

    real dxC = xCR - xCL;
    int dxCn = lrint(dxC/hx); /* integer closest to dxC/hx -- ensures that the mesh C defined below is compatible with Th */
    real dyC = yCR - yCL;
    int dyCn = lrint(dyC/hy);

    mesh C=square(dxCn, dyCn, [xCL + dxC*x, yCL + dyC*y], label=labs);
    fespace VC(C, P1);


    /* The the ideal oversampling patch is defined by 3 conditions:
     * Lying at the correct side of all three normals associated to S */
    normS=consNormals(Sx); /* normals to each of the boundaries of S */
    func cond1 = ( ipcheck(normS(2,:), Sx(0,:) ) < -1E-8 );
    func cond2 = ( ipcheck(normS(0,:), Sx(1,:) ) < -1E-8 );
    func cond3 = ( ipcheck(normS(1,:), Sx(2,:) ) < -1E-8 );

    VC patch;
    patch = cond1 && cond2 && cond3; 
    /* patch is a P1 representation of the conditions cond1, cond2 and cond3 being satisfied at the nodes of a fine mesh element 
     * S is obtained by requiring that they are all satisfied in all the vertices, i.e. patch > 2/3
     * patch is built on C rather than Th entirely to save time in costly function evaluations */
    if (debug) {
        VH0 psi=0;
        psi[][i]=1;
        plot(C, patch, psi, fill=1, cmm="Mesh element and oversampling patch", wait=1);
    }
    if (timing) {
        cout << "Building the indicator function for the (real) patch lasted " << clock()-time << " s" << endl;
        time=clock();
    }
    /* Build the real oversampling patch S */
    S = trunc(C, patch>0.9, split=1, label=1);

    if (debug) plot(C, S, cmm="Over-sampling fine mesh", wait=1);

    if (timing) {
        cout << "Building the patch lasted " << clock()-time << " s" << endl;
        time=clock();
    }
} // EOM