// tools.idp
//
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //
// Some (geometric) tools that are used when working with CR and oversampling methods and writing tools to provide output
//
// Variables not defined in this script /////////////////////////////////
// - ffLog -- (ofstream) writes execution log to "log_msfem.txt"
// - time -- (real) CPU time since last clocked
//
//
// Global variables declared in this script ////////////////////////////
// - (macro) residue[4] -- compute residue of the solution of a linear system and store in a predeclared variable
// - (macro) writeResidue[2] -- write a precomputed residue + message to the terminal and MsFEM log
// - (macro) printTime[1] -- print a message follows by the time since last clocking time (and clocks automatically)
// - (func)  consNormals[1] -- construct outward unit normals on the three edges of the argument passed
// - (macro) edgeIntegral[5] -- integration over a specific edge, one can choose to only integrate for specific labels
// - (macro) printIntegralsTri[2] -- write integrals of a function over all edges of the specified triangle to command line
// - (macro) ip[3] -- inner product between two components and a vector
// - (macro) ipcheck[2] -- compute the inner product of (x,y)-#2 and #1
////////////////////////////////////////////////////////////////////////





// Macro for residue computation of the resolution of linear systems
macro residue(mat,rhs,sol,residue) {
    real[int] res=mat*sol;
    res=res-rhs;
    real resNorm=sqrt(res'*res);
    real rhsNorm=sqrt(rhs'*rhs);
    residue=resNorm/rhsNorm;
} // EOM

// Macro for residue computation of the resolution of linear systems
macro writeResidue(residue,message) {
    cout << message << residue << endl;
	ffLog << message << residue << endl;
} // EOM

// Print a message follows by the time since last clocking time (and clocks automatically)
macro printTime(message) {
	real timeLapse = clock()-time;
	ffLog << message << timeLapse << "s" << endl;
	time=clock();
}
// EOM


// Constructing normals
func real[int,int] consNormals(real[int,int] & pp) {
    // construct unit outward normals for a triangle of nodes pp (given with positive orientation)
    // if p_0 = (x_0, y_0) and p_1 = (x_1, y_1), 
    // then the normal opposite p_3 constructed here is parallel to (and points in the same direction as)
    //   n =  / (y_1 - y_0) \
    //        \-(x-1 - x_0) /

    real[int,int] normals(3,2); normals=0;
    for(int k=0; k<3; k++) {
        normals(k,0) =  ( pp((k+2)%3,1) - pp((k+1)%3,1) );
        normals(k,1) = -( pp((k+2)%3,0) - pp((k+1)%3,0) );
        real len = sqrt(normals(k,0)^2 + normals(k,1)^2);
        normals(k,:) = normals(k,:)/len;
    }
    return normals;
}


// Integrals over edges 
// In its use, we mostly adopt the following conventions:
// - label==-1  =>  boundary of global domain
// - label== 1  =>  only interior edges are considered
macro edgeIntegral(S,label,normS,edg,fnc) (int1d(S,label)( (ip(N.x,N.y,normS(edg,:))>0.99) *fnc))// EOM


// writing integrals of a function over all edges of K to command line
macro printIntegralsTri(K,uH) {
    cout << "Integrals on K: ";
    for (edg=0; edg<3; edg++) {
        real toprint = edgeIntegral(K,1,normS,edg,uH) + edgeIntegral(K,-1,normS,edg,uH);
        cout << toprint << "  ";
    }
    cout << endl;
} // EOM


// Related to inner products

//inner product of (u,v) with a vector (w[0],w[1])
macro ip(u,v,w) (u*w[0] + v*w[1])// //EOM 


// Check if (x,y) - u2 points in the same direction as a normal vector u1
// A positive value means that this condition is indeed satisfied
macro ipcheck(u1, u2) ( u1[0]*(x-u2[0]) + u1[1]*(y-u2[1]) )// EOM