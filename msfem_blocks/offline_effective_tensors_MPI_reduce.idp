// offline_save_effective_tensors_MPI_reduce.idp
// 
// Send contributions to the effective coefficients computed by the current process to the main process
//
//
// Compatible with seqential and parallelized versions
//
//
// Variables not defined in this script /////////////////////////////////
// - useVc -- (int) indicates whether the correctors for constants are to be used
// - useB -- (int) indicates whether bubbles are to be used
// - testMS -- (int) indicates whether test functions are multiscale or P1
// - [/i]AHxx, [/i]AHxy, [/i]AHyx, [/i]AHyy, [/i]BHx, [/i]BHy, [/i]BAHx, [/i]BAHy, ..
//   [/i]MH, [/i]AHB, [/i]rHx, [/i]rHy, [/i]rH, [/i]lHx, [/i]lHy, [/i]lH, ..
//   [/i]AHxxTestMS, [/i]AHxyTestMS, [/i]AHyxTestMS, [/i]AHyyTestMS, [/i]BHxTestMS, [/i]BHyTestMS, ..
//   [/i]BAHxTestMS, [/i]BAHyTestMS, [/i]MHTestMS, [/i]rHxTestMS, [/i]rHyTestMS, [/i]rHTestMS -- (VH0) effective tensors
////////////////////////////////////////////////////////////////////////


mpiReduce(iAHxx[], AHxx[], processor(0,comm), mpiSUM);
mpiReduce(iAHyx[], AHyx[], processor(0,comm), mpiSUM);
mpiReduce(iAHxy[], AHxy[], processor(0,comm), mpiSUM);
mpiReduce(iAHyy[], AHyy[], processor(0,comm), mpiSUM);
mpiReduce(iBHx[], BHx[], processor(0,comm), mpiSUM);
mpiReduce(iBHy[], BHy[], processor(0,comm), mpiSUM);
if (fullVF) {
    mpiReduce(iBAHx[], BAHx[], processor(0,comm), mpiSUM);
    mpiReduce(iBAHy[], BAHy[], processor(0,comm), mpiSUM);
    mpiReduce(iMH[], MH[], processor(0,comm), mpiSUM);
}
if (useB) {
    mpiReduce(irH[], rH[], processor(0,comm), mpiSUM);
    mpiReduce(irHx[], rHx[], processor(0,comm), mpiSUM);
    mpiReduce(irHy[], rHy[], processor(0,comm), mpiSUM);
    if (treatB=="in_system") {
        mpiReduce(iAHB[], AHB[], processor(0,comm), mpiSUM);
        mpiReduce(ilHx[], lHx[], processor(0,comm), mpiSUM);
        mpiReduce(ilHy[], lHy[], processor(0,comm), mpiSUM);
        if (fullVF) mpiReduce(ilH[], lH[], processor(0,comm), mpiSUM);
    } 
}

if (testMS) {
    mpiReduce(iAHxxTestMS[], AHxxTestMS[], processor(0,comm), mpiSUM);
    mpiReduce(iAHyxTestMS[], AHyxTestMS[], processor(0,comm), mpiSUM);
    mpiReduce(iAHxyTestMS[], AHxyTestMS[], processor(0,comm), mpiSUM);
    mpiReduce(iAHyyTestMS[], AHyyTestMS[], processor(0,comm), mpiSUM);
    if (useVc) {
        mpiReduce(iBHxTestMS[], BHxTestMS[], processor(0,comm), mpiSUM);
        mpiReduce(iBHyTestMS[], BHyTestMS[], processor(0,comm), mpiSUM);
    }
    if (fullVF) {
        mpiReduce(iBAHxTestMS[], BAHxTestMS[], processor(0,comm), mpiSUM);
        mpiReduce(iBAHyTestMS[], BAHyTestMS[], processor(0,comm), mpiSUM);
        if (useVc) mpiReduce(iMHTestMS[], MHTestMS[], processor(0,comm), mpiSUM);
    }
    if(useB) {
        if (useVc) mpiReduce(irHTestMS[], rHTestMS[], processor(0,comm), mpiSUM);
        mpiReduce(irHxTestMS[], rHxTestMS[], processor(0,comm), mpiSUM);
        mpiReduce(irHyTestMS[], rHyTestMS[], processor(0,comm), mpiSUM);
    }
}

include "msfem_blocks/offline_effective_RHS_MPI_reduce.idp"