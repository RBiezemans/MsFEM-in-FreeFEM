// offline_effective_tensors_MPI_reduce.idp
//
// Send contributions to the effective coefficients computed by the current process..
// ..to the main process, so they can be processed by offline_save_effective_tensors.idp


mpiReduce(iAHxx[], AHxx[], processor(0,comm), mpiSUM);
mpiReduce(iAHyx[], AHyx[], processor(0,comm), mpiSUM);
mpiReduce(iAHxy[], AHxy[], processor(0,comm), mpiSUM);
mpiReduce(iAHyy[], AHyy[], processor(0,comm), mpiSUM);
mpiReduce(iBHx[], BHx[], processor(0,comm), mpiSUM);
mpiReduce(iBHy[], BHy[], processor(0,comm), mpiSUM);
if (useB) {
    mpiReduce(iAHB[], AHB[],  processor(0,comm), mpiSUM);
    mpiReduce(irH[],  rH[],  processor(0,comm), mpiSUM);
    mpiReduce(irHx[], rHx[], processor(0,comm), mpiSUM);
    mpiReduce(irHy[], rHy[], processor(0,comm), mpiSUM);
    if (treatB=="out_system") mpiReduce(ifH[], fH[], processor(0,comm), mpiSUM);
    else {
        mpiReduce(ifB[], fB[], processor(0,comm), mpiSUM);
        mpiReduce(ilHx[], lHx[], processor(0,comm), mpiSUM);
        mpiReduce(ilHy[], lHy[], processor(0,comm), mpiSUM);
    }
}

if (testMS) {
    mpiReduce(iAHxxTestMS[], AHxxTestMS[], processor(0,comm), mpiSUM);
    mpiReduce(iAHyxTestMS[], AHyxTestMS[], processor(0,comm), mpiSUM);
    mpiReduce(iAHxyTestMS[], AHxyTestMS[], processor(0,comm), mpiSUM);
    mpiReduce(iAHyyTestMS[], AHyyTestMS[], processor(0,comm), mpiSUM);
    if (useB) {
        mpiReduce(irHxTestMS[], rHxTestMS[], processor(0,comm), mpiSUM);
        mpiReduce(irHyTestMS[], rHyTestMS[], processor(0,comm), mpiSUM);
    }
    if (testMS==1) {
        mpiReduce(ifHxTestMS[], fHxTestMS[], processor(0,comm), mpiSUM);
        mpiReduce(ifHyTestMS[], fHyTestMS[], processor(0,comm), mpiSUM);
    }
}