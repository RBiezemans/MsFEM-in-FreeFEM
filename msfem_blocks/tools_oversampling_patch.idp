// tools_oversampling_patch.idp
//
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //
// Construction of an oversampling patch for a triangular coarse mesh element
// This construction has only been verified for meshes with the option flag==0
// For flag==2, it probably suffices to changes the flag type of the patch container C defined below
//
//
// Variables not defined in this script /////////////////////////////////
// - debug -- (int) provide helpful debugging output
// - timing -- (int) do performance measurement
// - TH -- (square) the coarse mesh of the global domain
// - Th -- (square) the fine mesh of the global domain
// - i -- (int) global index of the coarse mesh element K to be treated
// - osCoef -- (real) the homothety coefficient chosen for the oversampling patch
// - xb, yb -- (VH0) [x/y]-coordinate of the barycentres of the triangles of TH
// - hx, hy -- (real) size of the legs of the fine mesh elements
// - time -- (real) to clock CPU time clocked  
// - labs -- (real[int]) labels associated to the sides of the global (square) domain
// - consNormals -- (func[1]) constructs outward unit normals on the three edges of the argument passed
// - ipcheck -- (macro[2]) compute the inner product of (x,y)-#2 and #1
//
//
// Global variables declared in this script ////////////////////////////
// - (mesh)          Kx(i,[x/y]) -- [x/y]-coordinate of the ith vertex of K
// - (mesh)          S -- the oversampling patch, a restriction of the global fine mesh 
// - (real[int,int]) normS -- the normals of the original mesh element == those of the ideal oversampling patch 
// - (fespace)       VS -- P1 finite element space on S
////////////////////////////////////////////////////////////////////////


// Defining the vertices of the ideal oversampling patch (possibly lying partially outside the global domain)
real[int,int] Kx(3,2); //save coordinates of the vertices belonging to K
for(int kk=0; kk<3; kk++) {
    Kx(kk,0) = TH[i][kk].x;
    Kx(kk,1) = TH[i][kk].y;
}
real[int,int] Sx(3,2); //compute coordinates for the ideal oversampling patch by homothety
for(int kk=0; kk<3; kk++) {
    Sx(kk,0) = (osCoef)*(Kx(kk,0) - xb[][i]) + xb[][i];
    Sx(kk,1) = (osCoef)*(Kx(kk,1) - yb[][i]) + yb[][i];
}

if (timing) {
    cout << "Defining the ideal patch and its normals lasted " << clock()-time << " s" << endl;
    time=clock();
}

// Construction of a patch-container C around S that is (much) smaller than Omega
int NxC = Nx/nx;
int NyC = Ny/ny;

real xCL = (floor(Sx(:,0).min/hx)-1)*hx; //we take a small margin around the vertices of S as computed above
xCL = max(0.,xCL); //ensure that the patch-container is a subset of the global domain
real xCR = (ceil(Sx(:,0).max/hx)+1)*hx;
xCR=min(Lx, xCR);
real yCL = (floor(Sx(:,1).min/hy)-1)*hy;
yCL = max(0., yCL);
real yCR = (ceil(Sx(:,1).max/hy)+1)*hy;
yCR = min(Ly, yCR);

real dxC = xCR - xCL;
int dxCn = lrint(dxC/hx); //integer closest to dxC/hx -- ensures that the mesh C defined below is compatible with Th
real dyC = yCR - yCL;
int dyCn = lrint(dyC/hy);

mesh C=square(dxCn, dyCn, [xCL + dxC*x, yCL + dyC*y], label=labs);
fespace VC(C, P1);


// The the ideal oversampling patch is defined by 3 conditions: 
// Lying at the correct side of all three normals associated to S
real[int,int] normS(3,2); normS=consNormals(Sx); // normals to each of the boundaries of S
func cond1 = ( ipcheck(normS(2,:), Sx(0,:) ) < -1E-8 );
func cond2 = ( ipcheck(normS(0,:), Sx(1,:) ) < -1E-8 );
func cond3 = ( ipcheck(normS(1,:), Sx(2,:) ) < -1E-8 );

VC patch;
patch = cond1 && cond2 && cond3; 
// patch is a P1 representation of the conditions cond1, cond2 and cond3 being satisfied at the nodes of a fine mesh element
// S is obtained by requiring that they are all satisfied in all the vertices, i.e. patch > 2/3
// patch is built on C rather than Th entirely to save time in costly function evaluations
if (debug) {
    plot(C, patch, phi, fill=1, cmm="Mesh element and oversampling patch", wait=1);
}
if (timing) {
    cout << "Building the indicator function for the (real) patch lasted " << clock()-time << " s" << endl;
    time=clock();
}
// Build the real oversampling patch S
mesh S = trunc(C, patch>0.9, split=1, label=1);//, new2old=Th2S);
fespace VS(S,P1);

if (debug) plot(C, S, cmm="Over-sampling fine mesh", wait=1);

if (timing) {
    cout << "Building the patch lasted " << clock()-time << " s" << endl;
    time=clock();
}