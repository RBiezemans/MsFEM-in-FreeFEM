// local_problems_LIN_OS.idp
//
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //
// Computation of numerical correctors and bubble functions on a single coarse mesh element for MsFEM-LIN methods on an oversampling patch
//
//
// Scripts loaded ////////////////////////////////////////////////////////
// - offline_save_basis.idp 
//   -- save numerical correctors and bubble function
// - tools_oversampling_patch.idp
//   -- defines the sampling patch, its finite element space, the coordinates of the vertices of the coarse mesh element
//
//
// Variables not defined in this script /////////////////////////////////
// - debug -- (int) provide helpful debugging output
// - residue -- (macro[4]) compute and store the residue of the solution of a linear system
// - writeResidue -- (macro[2]) compute and write residues for the resolution of linear systems
// - imaxResOffline -- (real) storage of the maximum residue in the offline stage on the current process
// - iLINOSRes -- (real) storage of the maximum residue for the DOF option for LinOS on the current process
// - TH -- (square) the coarse mesh of the global domain
// - S -- (mesh) the fine mesh of the patch
// - phi -- (VH0) function on the coarse mesh that is used to partition the global domain
// - xb, yb -- (VH0) [x/y]-coordinate of the barycentres of the triangles of TH
// - useVcOnK -- (real[int]) indicates whether the correctors for constants are to be computed
// - useB -- (int) indicates whether bubbles are to be used
// - plotBubbles -- (int) indicates whether the user wishes to visualize V[c/x/y] and B
// - aBasis -- (macro) bilinear form for the local problems
// - VS -- (fespace)
// - Kx -- (real[int,int])
// - glue -- (string) specifies the way to glue patch functions
//  
//
// Global variables declared in this script ////////////////////////////
// - (mesh)    K -- fine mesh of the coarse mesh element indicated by phi
// - (fespace) VK -- P1 space on K
// - (VK)      Vc, Vx, Vy, B -- numerical correctors and bubble function on K
// - (VK)      uH[x/y]
// - (VS)      V[c/x/y]S, BS, uH[x/y]S -- variants computed on the patch
////////////////////////////////////////////////////////////////////////


// Construction of the sampling patch S, the fine-scale P1 space VS on S
include "tools_oversampling_patch.idp"

// Construction of the actual coarse mesh element K inside of the patch
int[int] S2K;
mesh K=trunc(S,phi>1,split=1,label=1,new2old=S2K); 
fespace VK(K,P1);
int[int] RS2K = restrict(VK,VS,S2K); //array for the restriction of a function on S to K

VS VcS=0, VxS=0, VyS=0, BS=0, uH=0, uHxS=x-xb[][i], uHyS=y-yb[][i];
// V[c/x/y]S -- the numerical corrector on the patch associated to constants/the [x/y]-direction
// BS -- bubble function on the patch for the MsFEM space associated to RHS = 1
// uH[x/y]S -- the centered coordinate function in the [x/y]-direction on the patch that appears in the definition of the effective coefficients
// uH -- serves as a dummy in the variational form pb to set the RHS for V[c/x/y]S and B

varf pb(uh,vh)=int2d(S)(aBasis(uh,vh)) + int1d(S)(tgv*uh*vh) //variational formulation of local problems -- bilinear form
            -int2d(S)(aBasis(uH,vh)); //variational formulation of local problems -- linear form for the RHS of the numerical correctors
varf id(unused,vh) = int2d(S)(vh);  //variational formulation of local problems -- linear form of the RHS for the bubble functions

// Definition and resolution of the linear systems for the fine-scale problems
matrix A=pb(VS,VS, solver=UMFPACK);
real[int] F(VS.ndof);

real locRes=0; //residue in the computation of the numerical correctors
if (useVcOnK[i]) {
    uH[]=1;  F=pb(0,VS);  VcS[]=A^-1*F;
    residue(A,F,VcS[],locRes); //store residue of the local problem to locRes
    imaxResOffline=max(locRes,imaxResOffline);
}
uH[]=uHxS[];  F=pb(0,VS);  VxS[]=A^-1*F;
residue(A,F,VxS[],locRes); //store residue of the local problem to locRes
imaxResOffline=max(locRes,imaxResOffline);
uH[]=uHyS[];  F=pb(0,VS);  VyS[]=A^-1*F;
residue(A,F,VyS[],locRes); //store residue of the local problem to locRes
imaxResOffline=max(locRes,imaxResOffline);
if (useB) {
    F=id(0,VS);     BS[]=A^-1*F;
    residue(A,F,BS[],locRes); //store residue of the local problem to locRes
    imaxResOffline=max(locRes,imaxResOffline);
}

// Restriction of the functions on the patch to the mesh element K
VK Vc=0, Vx=0, Vy=0, B=0, uHx=0, uHy=0; //restrictions of functions from S to K
if (useVcOnK[i]) Vc[]=VcS[](RS2K);
Vx[]=VxS[](RS2K);    Vy[]=VyS[](RS2K);  
uHx[]=uHxS[](RS2K);  uHy[]=uHyS[](RS2K); 
if(useB) B[]=BS[](RS2K);

if (glue=="dof") {
    // Impose continuity on the vertices of K if desired
    // This is done by adding the functions W[c/x/y] = [1/x/y]+V[c/x/y]
    real ndofK=3;
    real[int,int] gval(ndofK,ndofK); //matrix for W-values at the vertices
    real[int] Vcval(ndofK), Vxval(ndofK), Vyval(ndofK), Bval(ndofK); //values to be corrected of the patch functions

    for(int i=0; i<ndofK; i++) {
        // Evaluation of patch functions at the vertices: values to be corrected
        Vxval(i)=-Vx(Kx(i,0),Kx(i,1));
        Vyval(i)=-Vy(Kx(i,0),Kx(i,1));
        if (useVcOnK[i]) Vcval(i)=-Vc(Kx(i,0),Kx(i,1));
        if (useB) Bval(i)=-B(Kx(i,0),Kx(i,1));
        // Evaluation of 3 independent functions (W[c/x/y]) that solve the homogeneous PDE 
        gval(i,0)=Kx(i,0) - Vxval(i);
        gval(i,1)=Kx(i,1) - Vyval(i);
        gval(i,2)=1;
        if (useVcOnK[i]) gval(i,2)+=-Vcval(i);
    }
    matrix gmat=gval;
    set(gmat, solver=UMFPACK);
    real[int] c(ndofK);
    // Definition of the correcting functions W[c/x/y]
    VK Wc=1, Wx=x, Wy=y;
    Wx[]+=Vx[]; Wy[]+=Vy[];
    if (useVcOnK[i]) Wc[]+=Vc[];
    // Correction at the vertices by the resolution of linear systems
    // Vc
    if (useVcOnK[i]) {
        c=gmat^-1 * Vcval;
        residue(gmat,Vcval,c,locRes); //store residue of local linear combinations
        iLINOSRes=max(locRes,iLINOSRes);
        if (debug) writeResidue(locRes, "Residue for imposing continuity at the nodes (Vc): ")    
        Vc[]+=c[0]*Wx[];    Vc[]+=c[1]*Wy[];    Vc[]+=c[2]*Wc[];
    }
    // Vx
    c=gmat^-1 * Vxval;
    residue(gmat,Vxval,c,locRes); //store residue of local linear combinations
    iLINOSRes=max(locRes,iLINOSRes);
    if (debug) writeResidue(locRes, "Residue for imposing continuity at the nodes (Vx): ")
    Vx[]+=c[0]*Wx[];    Vx[]+=c[1]*Wy[];    Vx[]+=c[2]*Wc[];
    //Vy
    c=gmat^-1 * Vyval;
    residue(gmat,Vyval,c,locRes); //store residue of local linear combinations
    iLINOSRes=max(locRes,iLINOSRes);
    if (debug) writeResidue(locRes, "Residue for imposing continuity at the nodes (Vy): ")
    Vy[]+=c[0]*Wx[];    Vy[]+=c[1]*Wy[];    Vy[]+=c[2]*Wc[];
    //B
    if (useB) {
        c=gmat^-1 * Bval;
        residue(gmat,Bval,c,locRes); //store residue of local linear combinations
        iLINOSRes=max(locRes,iLINOSRes);
        if (debug) writeResidue(locRes, "Residue for imposing continuity at the nodes (B): ")
        B[]+=c[0]*Wx[];    B[]+=c[1]*Wy[];    B[]+=c[2]*Wc[];
    }
} else {
    assert(glue=="restrict");
}

if (plotBubbles) {
    if (useVcOnK[i]) plot(TH, Vc, fill=1, value=1, wait=1, cmm="Bubble function for constants");
    plot(TH, Vx, fill=1, value=1, wait=1, cmm="Bubble function for x-direction");
    plot(TH, Vy, fill=1, value=1, wait=1, cmm="Bubble function for y-direction");
    if (useB) plot(TH, B, fill=1, value=1, wait=1, cmm="Bubble function for the RHS");
}

include "offline_save_basis.idp" //store (externally) numerical correctors, bubble functions on K
