// offline_save_effective_tensors.idp
// 
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //
// Save all computed effective tensors (on the global process) to dedicated folders
//
//
// Compatible with seqential and parallelized versions
//
//
// Variables not defined in this script /////////////////////////////////
// - basisDir -- (string) name of directory where basis functions are stored
// - coeffDir -- (string) name of directory where effective coefficients are stored
// - useVcOnK -- (real[int]) indicates on which mesh element correctors for constants are to be used
// - useVc -- (int) indicates whether the correctors for constants are to be used
// - useB -- (int) indicates whether bubbles are to be used
// - testMS -- (int) indicates whether test functions are multiscale or P1
// - AHxx, AHxy, AHyx, AHyy, BHx, BHy, BAHx, BAHy, MH, AHB, rHx, rHy, rH, lHx, lHy, lH, ..
//   AHxxTestMS, AHxyTestMS, AHyxTestMS, AHyyTestMS, BHxTestMS, BHyTestMS, ..
//   BAHxTestMS, BAHyTestMS, MHTestMS, rHxTestMS, rHyTestMS, rHTestMS -- (VH0) effective tensors
////////////////////////////////////////////////////////////////////////


// Macro that provides the writing procedure of the vector vec to a file with name coeffDir+filename
macro writeVec2File(filename,vec) {string matrixFile = coeffDir + filename; ofstream ffmat (matrixFile); ffmat << vec;} // EOM

{ //save Vc pattern for future loading of basis functions
    string vecFile = basisDir + "/Vc_pattern.txt";
    ofstream ffvec (vecFile);
    ffvec << useVcOnK;
}

cout << "saving effective coefficients" << endl;
ffLog << "saving effective coefficients" << endl;
writeVec2File("/AHxx.txt", AHxx[])
writeVec2File("/AHyx.txt", AHyx[])
writeVec2File("/AHxy.txt", AHxy[])
writeVec2File("/AHyy.txt", AHyy[])
writeVec2File("/BHx.txt", BHx[])
writeVec2File("/BHy.txt", BHy[])
if (fullVF) {
    writeVec2File("/BAHx.txt", BAHx[])
    writeVec2File("/BAHy.txt", BAHy[])
    writeVec2File("/MH.txt", MH[])
}
if (useB) {
    writeVec2File("/rH.txt",  rH[])
    writeVec2File("/rHx.txt", rHx[])
    writeVec2File("/rHy.txt", rHy[])
    if (treatB=="in_system") {
        writeVec2File("/AHB.txt", AHB[])
        writeVec2File("/lHx.txt", lHx[])
        writeVec2File("/lHy.txt", lHy[])
        if (fullVF) writeVec2File("/lH.txt", lH[])
    } 
}

if (testMS) {
    writeVec2File("/AHxxTestMS.txt", AHxxTestMS[])
    writeVec2File("/AHyxTestMS.txt", AHyxTestMS[])
    writeVec2File("/AHxyTestMS.txt", AHxyTestMS[])
    writeVec2File("/AHyyTestMS.txt", AHyyTestMS[])
    if (useVc) {
        writeVec2File("/BHxTestMS.txt", BHxTestMS[])
        writeVec2File("/BHyTestMS.txt", BHyTestMS[])
    }
    if (fullVF) {
        writeVec2File("/BAHxTestMS.txt", BAHxTestMS[])
        writeVec2File("/BAHyTestMS.txt", BAHyTestMS[])
        if (useVc) writeVec2File("/MHTestMS.txt", MHTestMS[])
    }
    if(useB) {
        if (useVc) writeVec2File("/rHTestMS.txt",  rHTestMS[])
        writeVec2File("/rHxTestMS.txt", rHxTestMS[])
        writeVec2File("/rHyTestMS.txt", rHyTestMS[])
    }
}
