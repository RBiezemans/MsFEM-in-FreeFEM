// offline_load_MPI.idp
//
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //
// Load numerical correctors, bubble functions, and effective coefficients (if available) from earlier computations
// Compute and save effective coefficients if they were not available for the method used
// Compute effective coefficients related to the RHS of the PDE
//
//
// Compatible only with parallel version
//
//
// Scripts loaded ////////////////////////////////////////////////////////
// - offline_effective_tensors_MPI.idp
//   -- compute effective tensors on a single triangle
// - offline_save_effective_tensors.idp
//   -- save effective coefficients (once computed on the entire mesh)
// - offline_effective_tensors_MPI_reduce.idp
// - msfem_blocks/offline_effective_RHS_MPI.idp
//   -- compute all terms of the macroscopic problem envolving fRHS
// - offline_effective_RHS_MPI_reduce.idp
//
//
// Variables not defined in this script /////////////////////////////////
// - basisDir -- (string) name of directory where basis functions are stored
// - ndofOffline -- (int) number of DOF for each numerical corrector/bubble
// - coeffDir -- (string) name of directory where effective coefficients are stored
// - storeV[c/x/y], storeB -- (real[int,int]) structures to store the DOF of numerical correctors and bubbles
// - phi -- (VH0) function used to loop over TH
// - iproc -- (int) local index of the current process
// - countOffline -- (int) counter for the number of triangles associated to the current process
// - V[c/x/y] -- (VK) numerical correctors on K
// - B -- (VK) bubble function on K
// - useVc -- (int) indicates whether the correctors for constants are to be used
// - useVcOnK -- (real[int]) indicates whether the correctors for constants are to be used on a specific coarse mesh element
// - useB -- (int) indicates whether bubbles are to be used
// - testMS -- (int) indicates whether test functions are multiscale or P1
// - AHxx, AHxy, AHyx, AHyy, BHx, BHy, BAHx, BAHy, MH, AHB, rHx, rHy, rH, lHx, lHy, lH, ..
//   AHxxTestMS, AHxyTestMS, AHyxTestMS, AHyyTestMS, BHxTestMS, BHyTestMS, ..
//   BAHxTestMS, BAHyTestMS, MHTestMS, rHxTestMS, rHyTestMS, rHTestMS -- (VH0) effective tensors are loaded if possible (by the main process only)
////////////////////////////////////////////////////////////////////////


// Macro that provides the reading procedure from a file with name coeffDir+filename to the vector vec
macro readBasis(filename,storage) {
    string basisFile = basisDir + filename; 
    ifstream ffbasis (basisFile); 
    real[int] vec(ndofOffline);
    ffbasis >> vec;
    storage=vec;
} // EOM
// Macro that provides the reading procedure from a file with name coeffDir+filename to the vector vec
macro readFile2Vec(filename,vec) {string matrixFile = coeffDir + filename; ifstream ffmat (matrixFile); ffmat >> vec;} // EOM

int computeCoeff=0; //variable to indicate whether or not the effective coefficients were found
    //this is indeed possible when the basis was computed but the coefficients were determined
    //with another type of test functions

// Try to open typical files from the directory with effective coefficients
try {
    string matrixFile = coeffDir + "/AHxx.txt";
    ifstream ff(matrixFile);
    if (fullVF) {
            matrixFile = coeffDir + "/BAHx.txt";  {ifstream ff(matrixFile);}
        }
    if (testMS==1) {
        string matrixFile = coeffDir + "/AHxxTestMS.txt";  {ifstream ff(matrixFile);}
    }
    if (useB) {
        string matrixFile = coeffDir + "/rHx.txt";  {ifstream ff(matrixFile);}
        if (testMS==1) {
            matrixFile = coeffDir + "/rHxTestMS.txt";  {ifstream ff(matrixFile);}
        }
        if (treatB=="in_system") {
            matrixFile = coeffDir + "/lHx.txt";  {ifstream ff(matrixFile);}
        }
    }
}
catch (...) {
    computeCoeff=1; //compute effective coefficients below if the correct version does not exist yet
}

// Load and store the basis for the current process in storeV[c/x/y] and storeB
// Compute effective coefficients per coarse mesh element if needed
{ // Load Vc pattern over all coarse mesh elements
    string vecFile = basisDir + "/Vc_pattern.txt";
    ifstream ffvec (vecFile);
    ffvec >> useVcOnK;
}
for(int i=0; i<VH0.ndof; i++) {
if (iproc == i%nbproc) {
    if (i%(2*n)==0) {
        cout << "loading offline phase for tri " << i << endl;
        // if (iproc==0) ffLog << "loading offline phase for tri " << i << endl;
    }
    phi[][i]=2;
    if (useVcOnK[i]) { //store numerical correctors associated to constants
        string basisname = "/tri_" + i + "_Vc.txt";
        readBasis(basisname,storeVc(countOffline,:))
    }
    { //store numerical correctors associated to the x-direction
        string basisname = "/tri_" + i + "_Vx.txt";
        readBasis(basisname,storeVx(countOffline,:))
    }
    { //store numerical correctors associated to the y-direction
        string basisname = "/tri_" + i + "_Vy.txt";
        readBasis(basisname,storeVy(countOffline,:))
    }
    if (useB) { //store bubble functions for the FE space
        string basisname = "/tri_" + i + "_B.txt";
        readBasis(basisname,storeB(countOffline,:))
    }

    // Define the numerical correctors on the current triangle in order to..
    // ..compute the necessary effective quantities
    mesh K=trunc(Th,phi>1,split=1); 
    fespace VK(K, P1);
    VK Vc=0, Vx, Vy, B=0;
    if (useVcOnK[i]) Vc[]=storeVc(countOffline,:);
    Vx[]=storeVx(countOffline,:);
    Vy[]=storeVy(countOffline,:);
    if (useB) B[]=storeB(countOffline,:);
 
    // Compute effective coefficients (if needed)
    if (computeCoeff) {
        VK uHx=x-xb[][i], uHy=y-yb[][i];
        include "offline_effective_tensors_MPI.idp"
    } else {
    // Anything related to the right-hand side cannot be loaded from the offline phase 
    // It must be computed regardless of the availability of the coefficients
        include "offline_effective_RHS_MPI.idp"
    }

    phi[][i]=0;
    countOffline++;
}
}

// Reduction of effective quantities to the main process, storage of effective quantities if newly computed
if (computeCoeff) {
    cout << "reduce effective coefficients to main process" << endl;
    include "offline_effective_tensors_MPI_reduce.idp"
    if (iproc==0) {
        //if nonexistent, the directory to store the effective coefficient was created by the main file
        include "offline_save_effective_tensors.idp"
    }
}
else {
// The unavoidable reduction of quantities related to the RHS of the PDE
    include "offline_effective_RHS_MPI_reduce.idp"
}
mpiBarrier(comm);


// Loading the effective coefficients when possible
// Only to be done by the main process
if (computeCoeff==0 && iproc==0) {
    // store the piecewise constant coefficients of the effective PDE
    cout << "loading effective coefficients" << endl;
    ffLog << "loading effective coefficients" << endl;
    readFile2Vec("/AHxx.txt", AHxx[])
    readFile2Vec("/AHyx.txt", AHyx[])
    readFile2Vec("/AHxy.txt", AHxy[])
    readFile2Vec("/AHyy.txt", AHyy[])
    readFile2Vec("/BHx.txt", BHx[])
    readFile2Vec("/BHy.txt", BHy[])
    if (fullVF) {
        readFile2Vec("/BAHx.txt", BAHx[])
        readFile2Vec("/BAHy.txt", BAHy[])
        readFile2Vec("/MH.txt", MH[])
    }
    if (useB) {
        readFile2Vec("/rH.txt",  rH[])
        readFile2Vec("/rHx.txt", rHx[])
        readFile2Vec("/rHy.txt", rHy[])
        if (treatB=="in_system") {
            readFile2Vec("/AHB.txt", AHB[])
            readFile2Vec("/lHx.txt", lHx[])
            readFile2Vec("/lHy.txt", lHy[])
            if (fullVF) readFile2Vec("/lH.txt", lH[])
        } 
    }

    if (testMS) {
        readFile2Vec("/AHxxTestMS.txt", AHxxTestMS[])
        readFile2Vec("/AHyxTestMS.txt", AHyxTestMS[])
        readFile2Vec("/AHxyTestMS.txt", AHxyTestMS[])
        readFile2Vec("/AHyyTestMS.txt", AHyyTestMS[])
        if (useVc) {
            readFile2Vec("/BHxTestMS.txt", BHxTestMS[])
            readFile2Vec("/BHyTestMS.txt", BHyTestMS[])
        }
        if (fullVF) {
            readFile2Vec("/BAHxTestMS.txt", BAHxTestMS[])
            readFile2Vec("/BAHyTestMS.txt", BAHyTestMS[])
            if (useVc) readFile2Vec("/MHTestMS.txt", MHTestMS[])
        }
        if(useB) {
            if (useVc) readFile2Vec("/rHTestMS.txt",  rHTestMS[])
            readFile2Vec("/rHxTestMS.txt", rHxTestMS[])
            readFile2Vec("/rHyTestMS.txt", rHyTestMS[])
        }
    }
}

mpiBarrier(comm);
if (iproc==0) printTime("Offline phase (computing + storing, measured by main process) lasted ")
