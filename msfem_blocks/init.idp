// init.idp
//
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //
// Problem and MsFEM definition, declaration of global variables
// Definition of internal and external storage infrastructure
//
//
// Compatible with both sequential and parallel versions (main_* files)
// 
//
// Files read ////////////////////////////////////////////////////////////
// - "parameters.txt"
//   -- read L, Ndiscr, n, eps, logalpha, theta, cont, osCoef, glue, strongDir, useB, treatB, testMS
//
//
// Scripts loaded ////////////////////////////////////////////////////////
// - getARGV.idp 
//   -- use command line arguments
// - pdefile.idp
//   -- define PDE coefficients (nu, bx, by, sigma) and RHS (fRHS, rhsDescription)
// - vffile.idp
//   -- define vf of global and local problems (aComplete, aTest1 and aBasis)
//   -- specify computation options for the offline phase (useVc, fullVF)
//   -- define vfname
// - msfem_blocks/tools.idp
//   -- tools for the offline phase common to multiple MsFEM variants
//
//
// Variables not defined in this script /////////////////////////////////
// - name -- (string) abbreviation for  MsFEM underlying affine space
// - nameMPI -- (string) empty for sequential script; "_MPI" for parallel script
// - nbproc -- (int) the number of processes
// - iproc -- (int) number of the current process
// - bcType -- (string) indicates the type of global P1 space
//
//
// Global variables declared in this script ////////////////////////////
// - (real) time -- CPU time clocked at the beginning of the script
// - (ofstream) ffLog -- writes execution log to "log_msfem.txt"
// - (real) osThr -- threshold value above which sampling patches are used
// - (ofstream) ffRes -- writes residue information for local and global problems to dedicated file
// - (real) maxResOffline -- storage of the maximum residue in the offline stage on the main process
// - (real) imaxResOffline -- storage of the maximum residue in the offline stage on the current process
// - (real) LINOSRes -- storage of the maximum residue for the DOF option for LinOS on the main process
// - (real) iLINOSRes -- storage of the maximum residue for the DOF option for LinOS on the current process
// - (real) ResOnline -- residue of the online stage in the online stage
//
// Debugging ///////////////////////////////////////////////////////////
// - (int) debug, plotBubbles, plots, timing
//
// Declaring and reading external parameters ///////////////////////////
// - (string) offlineMODE [default == "compute"]
//            == "compute" 
//                Basis functions and effective coefficients are computed
//            == "offline" 
//                Numerical correctors and bubbles (if used) are loaded
//                An error arises if these are not available
//                Effective coefficients are loaded or recomputed if not all available
// - (real)   L -- size of the square domain
// - (real)   Lx, Ly
// - (int)    Ndiscr -- number of segments per dimension for the fine mesh
// - (int)    n -- number of segments per dimension for the coarse mesh
// - (int)    Nx, Ny, nx, ny
// - (real)   eps -- small parameter in the definition of the diffusion coefficient
// - (real)   alpha -- prefactor of the diffusion coefficient
// - (int)    logalpha -- sets alpha = 2.^logalpha
// - (real)   theta -- angle with the positive x-axis to define a constant advection field
// - (real)   cont -- parameter tuning the contrast of the diffusion coefficient
// - (real)   osCoef
//            >= osThr
//               Solve local problems on sampling patches around the barycentre of each coarse element
//               The patches are constructed with homothety ratio equal to osCoef
//            <  osThr
//               Solve local problems on the coarse mesh elements
// - (int)    useB 
//            == 0
//               No bubbles are used in the trial space
//            == 1
//               Bubbles are used in the trial space
// - (string) treatB 
//            == "out_system"
//                Bubble DOF are fixed to the average of fRHS
// -          == "in_system"
//                The linear system is enlarged to determined bubble DOF from the variational formulation
// - (int)    testMS 
//            == 0
//               The test space is the coarse P1 space
//            == 1
//               The test space is equal to the multiscale trial space
//            == 2
//               The matrix is constructed with the test space equal to the multiscale trial space
//               The RHS is constructed with the test functions of the coarse P1 space
//               ** Note that bubbles are always tested against multiscale bubbles **
// - (int)    strongDir 
//            == 0
//               CR elements are defined with weak boundary conditions on the boundary of the global domain (i.e. in the average sense)
//            == 1
//               CR basis functions are defined with strong, homogeneous boundary conditions on the boundary of the global domain 
//				 This is the 'affine boundary condition' variant of the thesis, 
//				   but only implemented for homogeneous boundary conditions of the solution
//               CR bubble functions are defined with strong, homogeneous boundary conditions on the boundary of the global domain
//			  == 2
//               CR correctors are defined with strong, homogeneous boundary conditions on the boundary of the global domain 
//				 This is the 'affine boundary condition' variant of the thesis, 
//				   correctly implemented for any Dirichlet condition on the coarse space
//               CR bubble functions are defined with strong, homogeneous boundary conditions on the boundary of the global domain
// - (string) glue
//            == "dof"
//               Multiscale basis functions for OS are DOF continuous
//            == "restrict"
//               Multiscale basis functions for OS are restricted from the patch without further continuity properties
// 
// Define the mesh ////////////////////////////////////////////////////
// - (real)     Hx, Hy -- size of the legs of the coarse mesh elements
// - (real)     hx, hy -- size of the legs of the fine mesh elements
// - (square)   TH -- coarse mesh
// - (square)   Th -- fine mesh
// - (fespace)  VH0 -- P0 space on TH
// - (fespace)  Vh -- P1 space on Th
// - (VH0)      phi -- function used to loop over TH
// - (VH0)      xb, yb -- [x/y]-coordinate of the barycentres of the triangles of TH
// - (int[int]) labs -- labels associated to the sides of the global (square) domain
// - (real)     PeGlob, PeLoc, PeFine, widthMadiot
//
// Define the PDE and the MsFEM ///////////////////////////////////////
// - (macro)  adif[2] -- bilinear form for diffusion term
// - (macro)  aadv[2] -- bilinear form for advection term
// - (macro)  aadvAdj[2] -- bilinear form for an adjoint advection term
// - (macro)  amass[2] -- bilinear form for reaction term
// - (macro)  asupg[2] -- bilinear form adding supg stabilization to the bilinear form in the discrete problem
//                        we ignore the diffusion term in the residue of the pde even when the diffusion is not piecewise constant
//                        Strictly speaking, this only provides SUPG for the MsFEM-lin
// - (macro)  rhssupg[1] -- linear form adding supg stabilization to the linear form in the discrete problem (consistency terms)
// - (VH0)    tau -- stabilization parameter that can be tuned element-by-element
// - (string) stabExpression -- description of the formula used to determine the stabilization coefficient
// - (int)    useVc [default == 1]
//            == 1
//            Compute (some) numerical correctors for constants
//            (For the MsFEM-CR with strongDir==1, these are not computed on all mesh elements)
//            == 0
//            Do not compute numerical correctors for constants (only for x,y direction)
// - (real[int]) useVcOnK -- vector to keep track of the use of numerical correctors for constants per mesh element
// - (int)    fullVF [default == 1]
//            == 1
//            Compute all possible coefficients of the effective schemes
//            == 0
//            Deactivate computation of effective coefficients that vanish if aComplete(1,.) vanishes
// - (int)    stabilization [default == 0]
//            == 0
//            Add supg stabilization terms to LHS and RHS of the discrete problem
//            == 1
//            No stabilization terms are used (equivalently, set tau=0)
// - (string) vfname [default == "no_VF_provided"] -- description of (global and local) VF used
//
//
// Define directory and file names for storage and output /////////////
// - (string) output -- name of the directory (possibly to be created) where all output will be stored
// - (string) parameters -- parameters tuning the PDE and the MsFEM applied
// - (string) parametersFine -- parameters tuning the PDE without coarse mesh information
// - (string) basisDir -- name of directory where basis functions are stored
// - (string) coeffDir -- name of directory where effective coefficients are stored
// - (string) coarseerrors -- controls what is saved in write_results[/_MPI].idp
//
// Define internal data structures ////////////////////////////////////   
// - (int)    ndofOffline -- number of DOF for each numerical corrector/bubble
// - (int)    storeLen -- numberof coarse mesh elements to be treated by a single process
// - (real[int]) storeVc, storeVx, storeVy, storeB -- structures to store the DOF of numerical correctors and bubbles
// - (real)   e[./r][L1,ML1,OL1,L2,ML2,OL2,H1,MH1,OH1,Max,OMax,MMlax] -- variables to save errors of the current process
// - (real[1]) e[./r][L1,ML1,OL1,L2,ML2,OL2,H1,MH1,OH1,Max,OMax,MMlax]Gl -- arrays to collect errors on the global process
// - (real)   n[L1,L2,H1,Max] -- variables to store reference solution norms for normalization
//
// Effective coefficients for the macroscopic problem /////////////////
// - (VH0) AH[xx/xy/yx/yy] -- will hold the 2x2 matrix that captures the effective (physical + upscaling) diffusion due to multiscale trial functions
// - (VH0) BH[x/y]  -- will hold the 2x1 vector that captures the effective (physical + upscaling) advection due to multiscale trial functions
// - (VH0) BAH[x/y] -- will hold the 2x1 vector that captures the effective (physical + upscaling) adjoint advection field due to multiscale trial functions
// - (VH0) MH       -- will hold the real coefficient that captures the effective (physical + upscaling) reaction terms due to multiscale trial functions
// - (VH0) AHB      -- will hold the diagonal entries for the bubble functions tested against bubbles
// - (VH0) rH[x/y]  -- will hold the 2x1 vector that captures bubbles tested against P1 function gradients
// - (VH0) rH       -- will hold the real coefficient that captures bubbles tested against constants
//                  The rH[/x/y] terms can be moved to the RHS of the macroscopic scheme if treatB == out_system
// - (VH0) lH[x/y]  -- will hold the 2x1 vector that captures P1 function gradients tested against bubbles
// - (VH0) lH       -- will hold the real coefficient that captures constants tested against bubbles
// - (VH0) fH       -- will hold the average of the RHS function on each mesh element if treatB == out_system
// - (VH0) fB       -- will hold the integral of the RHS function on each mesh element against the respective bubble function if treatB == in_system
//                  ** Note that the quantities fH and fB are computed on the fine mesh, contrary to what a traditional FEM code might do **
// - (VH0)  AH[xx/xy/yx/yy]TestMS, BH[x/y]TestMS, BAH[x/y]TestMS, MHTestMS, rH[x/y]TestMS, rHTestMS,
//          fHxTestMS, fHyTestMS, fHTestMS, fHxTestMSsupg, fHyTestMSsupg, fHTestMSsupg,
//          ** In fH[/x/y]TestMS[/supg], fRHS is again integrated more accurately than a P1 method may do **
// - (VH0)  iAH[xx/xy/yx/yy], iBH[x/y], iBAH[x/y], iMH, iAHB, irH[x/y], irH,
//          ilH[x/y], ilH, ifH, ifHB
// - (VH0)  iAH[xx/xy/yx/yy]TestMS, iBH[x/y]TestMS, iBAH[x/y]TestMS, iMHTestMS, irH[x/y]TestMS, irHTestMS,
//          fHxTestMS, fHyTestMS, fHTestMS
// - (varf) rhsP1 -- right-hand side of the effective problem
// - (varf) rhsP1supg -- supg stabilization terms for the right-hand side of the effective problem
// - (varf) effectiveVar -- effective bilinear form without bubble functions
// - (varf) rEffective -- effective form for bubbles tested against P1
// - (varf) rEffectiveOS -- effective form for predetermined bubbles tested against P1
// - (varf)	lEffective -- effective form for P1 tested against bubbles
///////////////////////////////////////////////////////////////////////


/////// TO BE DONE
// Add an explanation on maximum values of the allowed values of the oversampling coefficient
// Investigate OS strategies if flags in the mesh creation is not set to 0
// Implement strong boundary conditions for CR and over-sampling methods


///////////////////////////////////////////////////////////////////////
// Some additional parameters that are used during code development  //
int debug=0; //display/hide intermediate output                      //
int plotBubbles=0; //show plots of numerical correctors and bubbles  //
int plots=1; //display/hide basic input and output plots             //
int timing=0; //time certain steps in oversampling methods           //
///////////////////////////////////////////////////////////////////////


// Current cpu time used for performance assessment if timing==True
real time=clock(); 
// Outfile stream for process output
ofstream ffLog("log_msfem.txt", append);


///////////////////////////////////////////////////////////////////////
// Declaring and reading external parameters                         //
///////////////////////////////////////////////////////////////////////

// Command line argument: option for the offline phase
include "getARGV.idp"
string offlineMode = getARGV("-o", "compute");
assert(offlineMode == "compute" || offlineMode == "load");

// Parameters defining the domain
real L, Lx, Ly;
// Parameters defining the fine mesh
int Ndiscr, Nx, Ny;
// Parameters defining the coarse mesh
int n, nx, ny;
// Parameters defining the PDE
real eps, alpha, theta, cont, osCoef;
//theta: angle of the advection field
//cont: contrast of the multiscale coefficient
real osThr=0.5;
//threshold to decide whether oversampling is to be employed
int logalpha, logeps;
// Parameters tuning the MsFEM method
int strongDir, useB, testMS;
string glue, treatB;

// Reading parameters from external file "parameters.txt"
{
	ifstream f("parameters.txt");
	string read;
	f >> read >> L;        Lx=L; Ly=L;
	f >> read >> Ndiscr;   Nx=Ndiscr; Ny=Ndiscr;
	f >> read >> n;		   nx=n; ny=n;
	f >> read >> eps;
	f >> read >> logalpha; alpha=2.^logalpha;
	f >> read >> theta;
	f >> read >> cont;
    f >> read >> osCoef;
	f >> read >> glue;
	f >> read >> strongDir;
	f >> read >> useB;
	f >> read >> treatB;
	f >> read >> testMS;
}

// Compatibility checks for certain parameters
if (bcType == "Lin") assert(strongDir==0); // strong local Dirichlet BC are not supported for the MsFEM-lin
else assert(strongDir==0 || strongDir==1 || strongDir==2);
if (!useB) assert(treatB=="out_system");
  //without bubbles, there is no need to construct linear equations with bubble functions
assert(treatB=="out_system" || treatB=="in_system");
if (osCoef>=osThr) {
	assert(glue=="dof" || glue=="restrict");
}


///////////////////////////////////////////////////////////////////////
// Define the global coarse and fine meshes and numerical parameters //
///////////////////////////////////////////////////////////////////////

// Coarse mesh TH
real Hx=Lx/nx, Hy=Ly/ny;
mesh TH=square(nx,ny,[Lx*x,Ly*y]);
fespace VH0(TH,P0); //piecewise constant FE space on coarse mesh
VH0 phi=0; //pw constant function to loop over coarse mesh elements
VH0 xb,yb;
xb=x; yb=y; //interpolate and stock the coordinates of the barycentre for each triangle

// Fine mesh Th
real hx=Lx/Nx, hy=Ly/Ny;
int[int] labs=[-1,-1,-1,-1]; //this label is useful to construct CR elements
mesh Th=square(Nx,Ny,[Lx*x,Ly*y], label=labs);
fespace Vh(Th,P1); //fine global FE space

// Peclet numbers and boundary layer definition of F. Madiot
real PeGlob = 1./2./alpha; //global Peclet number, computational domain
real PeLoc = PeGlob*sqrt(2)/nx; //local Peclet number, coarse mesh
real PeFine = PeGlob*sqrt(2)/Nx; //local Peclet number, fine mesh
real widthMadiot = log(PeGlob)/PeGlob; //log = natural logarithm


///////////////////////////////////////////////////////////////////////
// Define the PDE and the MsFEM                                      //
///////////////////////////////////////////////////////////////////////

// Definition of the PDE coefficient and 
// the necessary bilinear forms for the variational formulation as macros
include "pdefile.idp"
 
macro adif(u,v) (dx(u)*dx(v)*nu+dy(u)*dy(v)*nu)// EOM
//bilinear form associated to diffusion
macro aadv(u,v) ( v*(  bx*dx(u)+by*dy(u) ) )// EOM
//bilinear form associated to advection
macro aadvAdj(u,v) ( u*(  bx*dx(v)+by*dy(v) ) )// EOM
//bilinear form associated to an adjoint advection term
macro amass(u,v) (u*v*sigma)// EOM
//bilinear form associated to mass/reaction terms

// Load the variational formulation of the global and local problems
// (macros must be called aComplete and aBasis, respectively)
int useVc=1; //can be set to zero if aBasis(1,w)==0 for all test functions w
int fullVF=1; //can be set to zero if all terms with gradients on u vanish from the effective VF
VH0 tau=0; //a stabilization parameter can be defined in the vffile
int stabilization=0; //to be set to 1 if stabilization terms are to be used in the RHS
macro asupg(u,v) (tau*( (bx*dx(u)+by*dy(u))*(bx*dx(v)+by*dy(v)) ))// EOM
//bilinear form for supg stabilization
string stabExpression="-- Stabilization parameter = unused --"; //can be specified in vffile if relevant
string vfname="no_VF_provided"; //string to characterize the output directory for MsFEM results

include "vffile.idp"

real[int] useVcOnK(VH0.ndof); //an array to keep track of the computation of Vc at the bounday of Omega for strong Dirichlet conditions
useVcOnK=useVc;
if (name=="CR" && strongDir==1) {
	useVc=1; //we need at least some non-trivial Vc functions because of non-homogeneous BC..
	fullVF=1; //..if we want to enforce strong conditions on the boundary of Omega
}
if (fullVF==0) assert(useVc==0);
if (stabilization==1) assert(useB==0); //supg with bubbles is not supported

// Stabilization to be used at the RHS of the variational problem
macro rhssupg(v) (fRHS * tau * (bx*dx(v)+by*dy(v)))// EOM

if (plots) { //plot of diffusion coefficient
	Vh nuh = nu;
	plot(nuh, cmm="Diffusion coefficient", wait=1, fill=1, value=1);
}


///////////////////////////////////////////////////////////////////////
// Define directory and file names for storage and output            //
///////////////////////////////////////////////////////////////////////

string output = "results_" + vfname + "/"; //directory name to store all test results
string residueFile = output + "log_residues_" + vfname + ".txt";
if (name=="REF") residueFile = "./log_residues_REF.txt";

// Parameter strings for reference (fine mesh) and MsFEM solution names
string parametersFine = "_alpha_" + alpha + "_cont_" + cont + "_eps_" + eps; 
string parameters = parametersFine;
if (osCoef >= osThr) {
    //add OS coefficient for OS methods
	parameters = parameters + "_OS_" + osCoef;
}
parametersFine = parametersFine + "_N_" + Ndiscr;
parameters = parameters + "_N_" + Ndiscr + "_n_" + nx;

// Update name string to characterize specific MsFEM options
string nameBasis = name; // to be used to check if an output directory should be created
if (osCoef >= osThr) {
	//osCoef should be 0 when no oversampling is applied and larger than 1 if it is to be applied
	name = name + "OS";
	if (glue=="dof") name = name + "gld";
	else name = name + "glr";	
}
if (bcType=="CR" || osCoef>osThr) {
	//specify the use of weak or strong BC for CR methods
	if (strongDir) name = name + "_strDir_" + strongDir;
	else name = name + "_weakDir";
}

// Directory names for storage of offline phase
string basisDir = output + "basis_" + name + parameters;
string coeffDir = output + "effective_coeff_" + name + parameters;
if (iproc==0 && nameBasis != "REF") {
    string createDir = "mkdir -p " + output;
    exec(createDir);
	if (bcType != "") { //exclude the code used for the computation of the reference solution
		createDir = "mkdir -p " + basisDir;
		exec(createDir); //directory to store numerical correctors and bubble functions
		createDir = "mkdir -p " + coeffDir;
		exec(createDir); //directory to store the effective coefficients for the MsFEM
	}
}

// Add the choice of test space to the MsFEM name
name = name + nameMPI;
name = name + "_testMS_" + testMS;

// Add the bubble specifications to the MsFEM name
if (useB) {
	name = name + "_wB";
	if (treatB=="out_system") name = name + "os";
	else name = name + "is";
}
else name = name + "_nB";

int coarseerrors=0; //to be set to 1 if the script considers coarse errors 
                    //and no solutions are to be saved in write_results[/_MPI].idp


// Define residue output stream and data structures
ofstream ffRes(residueFile, append);
real maxResOffline=0; //storage of the maximum residue in the offline stage on the main process
real imaxResOffline=0; //storage of the maximum residue in the offline stage on the current process
real LINOSRes=0; //storage of the maximum residue for the DOF option for LinOS on the main process
real iLINOSRes=0; //storage of the maximum residue for the DOF option for LinOS on the current process
real ResOnline=0; //residue of the online stage in the online stage -- restricted to main process only

// Write starting message for the method
if (iproc==0) {
	cout << "////////////////////////////////////////////////////////////////" << endl;
	ffLog << "////////////////////////////////////////////////////////////////" << endl;
	if (nameBasis == "REF") {
		cout << "// Computing reference solution with parameters " + parametersFine << endl;
		ffLog << "// Computing reference solution with parameters " + parametersFine << endl;
		ffRes << "// Computing reference solution with parameters " + parametersFine << endl;
	} else {
		cout << "// Performing " + name + " with parameters " + parameters << endl;
		cout << "// Variational forms used: " + vfname << endl;
		ffLog << "// Performing " + name + " with parameters " + parameters << endl;
		ffLog << "// Variational forms used: " + vfname << endl;
		ffRes << "// Performing " + name + " with parameters " + parameters << endl;
	}
}


///////////////////////////////////////////////////////////////////////
// Define internal data structures                                   //
///////////////////////////////////////////////////////////////////////

int ndofOffline;
{
    // Obtain the number of DOF for the discretization of each coarse element
    phi[][0]=2;
    mesh K=trunc(Th,phi>1,split=1);
    fespace VK(K,P1);
    ndofOffline=VK.ndof;
	phi[][0]=0;
}

// Data structures to store offline computations, to be re-used in the reconstruction phase
int storeLen = VH0.ndof/nbproc;
if (VH0.ndof%nbproc>0) {
	storeLen += 1; //correction for round-off
}
real[int,int] storeVc(storeLen,ndofOffline); storeVc=0;
real[int,int] storeVx(storeLen,ndofOffline); storeVx=0;
real[int,int] storeVy(storeLen,ndofOffline); storeVy=0;
real[int,int] storeB(storeLen,ndofOffline); storeB=0;

// Initialize data structures to save errors on the global process
// These reals can be used when no communication between processes is required
real eL1=0,   eL2=0,   eH1=0,   eMax=0; //errors on the entire domain
real eML1=0,  eML2=0,  eMH1=0,  eMMax=0; //errors OBL according to the definition of Madiot
real eOL1=0,  eOL2=0,  eOH1=0,  eOMax=0; //errors outside the mesh elements at the outflow
real erL1=0,  erL2=0,  erH1=0,  erMax=0; //relative errors on the entire domain
real erML1=0, erML2=0, erMH1=0, erMMax=0; //relative errors OBL according to the definition of Madiot
real erOL1=0, erOL2=0, erOH1=0, erOMax=0; //relative errors outside the mesh elements at the outflow
// MPI reduce can only handle arrays in FreeFem
real[int] eL1Gl(1),   eL2Gl(1),   eH1Gl(1),   eMaxGl(1); //errors on the entire domain
real[int] eML1Gl(1),  eML2Gl(1),  eMH1Gl(1),  eMMaxGl(1); //errors OBL according to the definition of Madiot
real[int] eOL1Gl(1),  eOL2Gl(1),  eOH1Gl(1),  eOMaxGl(1); //errors outside the mesh elements at the outflow
real[int] erL1Gl(1),  erL2Gl(1),  erH1Gl(1),  erMaxGl(1); //relative errors on the entire domain
real[int] erML1Gl(1), erML2Gl(1), erMH1Gl(1), erMMaxGl(1); //relative errors OBL according to the definition of Madiot
real[int] erOL1Gl(1), erOL2Gl(1), erOH1Gl(1), erOMaxGl(1); //relative errors outside the mesh elements at the outflow
// For the various norms of uref
real nL1=0, nL2=0, nH1=0, nMax=0; 


///////////////////////////////////////////////////////////////////////
// Effective coefficients for the macroscopic problem                //
///////////////////////////////////////////////////////////////////////

// Effective coefficients for the main process (== only process for sequential code)
VH0 AHxx=0, AHxy=0, AHyx=0, AHyy=0, 
	BHx=0, BHy=0, BAHx=0, BAHy=0, MH=0, 
	fH=0, fB=0,
	AHB=0, rH=0, rHx=0, rHy=0, lH=0, lHx=0, lHy=0;

// Additional coefficients of the effective problem to capture mutliscale test contributions
VH0 AHxxTestMS=0, AHxyTestMS=0, AHyxTestMS=0, AHyyTestMS=0, 
	BHxTestMS=0, BHyTestMS=0, BAHxTestMS=0, BAHyTestMS=0, MHTestMS=0, 
	fHxTestMS=0, fHyTestMS=0, fHTestMS=0,
	fHxTestMSsupg=0, fHyTestMSsupg=0, fHTestMSsupg=0,
	rHTestMS=0, rHxTestMS=0, rHyTestMS=0;
// There is no AHBTestMS/lH[/x/y]TestMS because we always test against the computed multiscale bubbles

// Effective coefficients for the current process, to be sent to the main process at the end of the online stage
VH0 iAHxx=0, iAHxy=0, iAHyx=0, iAHyy=0, 
	iBHx=0, iBHy=0, iBAHx=0, iBAHy=0, iMH=0, 
	ifH=0, ifB=0,
	iAHB=0, irH=0, irHx=0, irHy=0, ilH=0, ilHx=0, ilHy=0;
VH0 iAHxxTestMS=0, iAHxyTestMS=0, iAHyxTestMS=0, iAHyyTestMS=0, 
	iBHxTestMS=0, iBHyTestMS=0, iBAHxTestMS=0, iBAHyTestMS=0, iMHTestMS=0, 
	ifHxTestMS=0, ifHyTestMS=0, ifHTestMS=0,
	ifHxTestMSsupg=0, ifHyTestMSsupg=0, ifHTestMSsupg=0,
	irHTestMS=0, irHxTestMS=0, irHyTestMS=0;
 
// Effective variational forms in terms of the above coefficients (that are to be computed)
// All piecewise constant coefficients will be computed in such a way that the evaluation..
// ..of the respective integrals at the barycentre corresponds to the exact integral..
// ..to be computed for the effective problem
varf rhsP1(unused,vH) = // Right-hand side of the effective problem
	 int2d(TH)(fRHS*vH) 
	+int2d(TH,qft=qf1pT)(fHTestMS*vH + fHxTestMS*dx(vH) + fHyTestMS*dy(vH));
varf rhsP1supg(unsued,vH) = // Right-hand side contribution for the SUPG method
	 int2d(TH)(rhssupg(vH))
	+int2d(TH,qft=qf1pT)(fHTestMSsupg*vH + fHxTestMSsupg*dx(vH) + fHyTestMSsupg*dy(vH));
varf effectiveVar(uH,vH) = // Effective bilinear form without bubble functions
	 int2d(TH,qft=qf1pT)( dx(vH)*(AHxx+AHxxTestMS)*dx(uH) + dy(vH)*(AHyx+AHyxTestMS)*dx(uH) 
	                    + dx(vH)*(AHxy+AHxyTestMS)*dy(uH) + dy(vH)*(AHyy+AHyyTestMS)*dy(uH) 
						+ vH*(BHx+BHxTestMS)*dx(uH)   + vH*(BHy+BHyTestMS)*dy(uH)
						+ uH*(BAHx+BAHxTestMS)*dx(vH) + uH*(BAHy+BAHyTestMS)*dy(vH)
						+ uH*vH*(MH+MHTestMS) );
varf rEffective(u0,vH) = // Effective form for bubbles tested against P1
	 int2d(TH,qft=qf1pT)( u0*( (rHx+rHxTestMS)*dx(vH) + (rHy+rHyTestMS)*dy(vH)
	                         + (rH+rHTestMS)*vH ) );
varf rEffectiveOS(unused,vH) = // Effective form for predetermined bubbles tested against P1
	 int2d(TH,qft=qf1pT)( fH*( (rHx+rHxTestMS)*dx(vH) + (rHy+rHyTestMS)*dy(vH)
	                         + (rH+rHTestMS)*vH ) );
varf lEffective(uH,v0) = // Effective form for P1 tested against bubbles
	 int2d(TH,qft=qf1pT)( v0*( lH*uH + lHx*dx(uH) + lHy*dy(uH)) );


//load some functions and macros for general purposes
include "msfem_blocks/tools.idp" 
