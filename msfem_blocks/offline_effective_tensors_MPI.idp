// offline_effective_tensors_MPI.idp
//
// Computation of the effective tensors based on pre-computed numerical correctors Vc, Vx, Vy and possibly a bubble B
//
//
// Compatible only with parallel version
//
//
// Scripts loaded ////////////////////////////////////////////////////////
// - msfem_blocks/offline_effective_RHS_MPI.idp
//   -- compute all terms of the macroscopic problem envolving fRHS
//
//
// Variables not defined in this script /////////////////////////////////
// - iAHxx, iAHxy, iAHyx, iAHyy, iBHx, iBHy, iBAHx, iBAHy, iMH, iAHB, irHx, irHy, irH, ilHx, ilHy, ilH, ..
//   iAHxxTestMS, iAHxyTestMS, iAHyxTestMS, iAHyyTestMS, iBHxTestMS, iBHyTestMS, ..
//   iBAHxTestMS, iBAHyTestMS, iMHTestMS, irHxTestMS, irHyTestMS, irHTestMS -- (VH0) effective tensors for the current process
// - K -- (mesh)
// - V[c/x/y] -- (VK) numerical correctors on K
// - B -- (VK) bubble function on K
// - aComplete -- bilinear form of the global problem
// - aTest1 -- bilinear form of the global problem suitable for testing against a constant
// - useVc -- (int) indicates whether the correctors for constants are to be used
// - useB -- (int) indicates whether bubbles are to be used
// - testMS -- (int) indicates whether test functions are multiscale or P1
// - fullVF -- (int) indicates whether the BAH[x/y] and MH vanish in the effective problem
////////////////////////////////////////////////////////////////////////


VK phi0=1, phix, phiy; //sums of affine functions and numerical correctors
if (useVc) {
    phi0[]+=Vc[];
}
phix[]=uHx[]+Vx[]; 
phiy[]=uHy[]+Vy[];

iAHxx[][i]=int2d(K)(aComplete(phix,uHx))/K.measure;
iAHyx[][i]=int2d(K)(aComplete(phix,uHy))/K.measure; 
iAHxy[][i]=int2d(K)(aComplete(phiy,uHx))/K.measure; 
iAHyy[][i]=int2d(K)(aComplete(phiy,uHy))/K.measure;
// pay attention, AH.. is not symmetric when a is not

iBHx[][i]=int2d(K)(aTest1(phix,1))/K.measure;
iBHy[][i]=int2d(K)(aTest1(phiy,1))/K.measure;

if (fullVF) {
    iBAHx[][i]=int2d(K)(aComplete(phi0,uHx))/K.measure;
    iBAHy[][i]=int2d(K)(aComplete(phi0,uHy))/K.measure;
    iMH[][i]=int2d(K)(aTest1(phi0,1))/K.measure;
}

if (useB) {
    irHx[][i]=int2d(K)(aComplete(B,uHx))/K.measure;
    irHy[][i]=int2d(K)(aComplete(B,uHy))/K.measure;
    irH[][i] =int2d(K)(aTest1(B,1))/K.measure;   
    if (treatB=="in_system") {
        iAHB[][i]=int2d(K)(aComplete(B,B)); //no division by K.measure because this term does not appear in any effective varf
        ilHx[][i]=int2d(K)(aComplete(phix,B))/K.measure;
        ilHy[][i]=int2d(K)(aComplete(phiy,B))/K.measure;
        if (fullVF) ilH[][i]=int2d(K)(aComplete(phi0,B))/K.measure;
    }
}

if(testMS) {
    // One might also exclude this loop for certain methods since it will not yield any contributions, but let us test this first!
    iAHxxTestMS[][i]=int2d(K)(aComplete(phix,Vx))/K.measure;
    iAHyxTestMS[][i]=int2d(K)(aComplete(phix,Vy))/K.measure; 
    iAHxyTestMS[][i]=int2d(K)(aComplete(phiy,Vx))/K.measure; 
    iAHyyTestMS[][i]=int2d(K)(aComplete(phiy,Vy))/K.measure;
    
    if (useVc) {
        iBHxTestMS[][i]=int2d(K)(aComplete(phix,Vc))/K.measure;
        iBHyTestMS[][i]=int2d(K)(aComplete(phiy,Vc))/K.measure;
    }

    if (fullVF) {
        iBAHxTestMS[][i]=int2d(K)(aComplete(phi0,Vx))/K.measure;
        iBAHyTestMS[][i]=int2d(K)(aComplete(phi0,Vy))/K.measure;
        if (useVc) iMHTestMS[][i]=int2d(K)(aComplete(phi0,Vc))/K.measure;
    }

    if (useB) {
        // No "AHBTestMS" -- we always use the (multiscale) precomputed bubbles B
        irHxTestMS[][i]=int2d(K)(aComplete(B,Vx))/K.measure;
        irHyTestMS[][i]=int2d(K)(aComplete(B,Vy))/K.measure;
        if (useVc) irHTestMS[][i] =int2d(K)(aComplete(B,Vc))/K.measure;   
        // No "lH[x/y]TestMS" -- we always use the (multiscale) precomputed bubbles B
    }
}

include "msfem_blocks/offline_effective_RHS_MPI.idp"