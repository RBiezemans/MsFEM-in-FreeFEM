// offline_effective_tensors_MPI.idp
//
// Computation for the effective tensors for advection-diffusion based on pre-computed bubbles Vx, Vy and B
//
// Compatible only with parallel version


iAHxx[][i]=int2d(K)(a(uHx,uHx,nu,bx,by) + a(Vx,uHx,nu,bx,by))/K.measure;
iAHyx[][i]=int2d(K)(a(uHx,uHy,nu,bx,by) + a(Vx,uHy,nu,bx,by))/K.measure; 
iAHxy[][i]=int2d(K)(a(uHy,uHx,nu,bx,by) + a(Vy,uHx,nu,bx,by))/K.measure; 
iAHyy[][i]=int2d(K)(a(uHy,uHy,nu,bx,by) + a(Vy,uHy,nu,bx,by))/K.measure;
/* pay attention, AH.. is not symmetric when a is not */

iBHx[][i]=int2d(K)(aadv(uHx,1,bx,by) + aadv(Vx,1,bx,by))/K.measure;
iBHy[][i]=int2d(K)(aadv(uHy,1,bx,by) + aadv(Vy,1,bx,by))/K.measure;

if(useB) {
    irH[][i] =-int2d(K)(aadv(B,1,bx,by))/K.measure;
    irHx[][i]=-int2d(K)(a(B,uHx,nu,bx,by))/K.measure;
    irHy[][i]=-int2d(K)(a(B,uHy,nu,bx,by))/K.measure;
}

ifH[][i]=int2d(K)(fRHS)/K.measure;

if(testMS) {
    // One might also exclude this loop for certain methods since it will not yield any contributions, but let us test this first!
    iAHxxTestMS[][i]=int2d(K)(a(uHx,Vx,nu,bx,by) + a(Vx,Vx,nu,bx,by))/K.measure;
    iAHyxTestMS[][i]=int2d(K)(a(uHx,Vy,nu,bx,by) + a(Vx,Vy,nu,bx,by))/K.measure; 
    iAHxyTestMS[][i]=int2d(K)(a(uHy,Vx,nu,bx,by) + a(Vy,Vx,nu,bx,by))/K.measure; 
    iAHyyTestMS[][i]=int2d(K)(a(uHy,Vy,nu,bx,by) + a(Vy,Vy,nu,bx,by))/K.measure;

    if(useB) {
        irHxTestMS[][i]=-int2d(K)(a(B,Vx,nu,bx,by))/K.measure;
        irHyTestMS[][i]=-int2d(K)(a(B,Vy,nu,bx,by))/K.measure;
    }

    ifHxTestMS[][i]=int2d(K)(fRHS*Vx)/K.measure;
    ifHyTestMS[][i]=int2d(K)(fRHS*Vy)/K.measure;
}