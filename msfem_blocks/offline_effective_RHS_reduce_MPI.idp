// offline_effective_RHS_reduce_MPI.idp
// 
// //         //          ////////  ////////  //         //
// ////      ///  //////  //        //        ////      ///
// // //    ////  //      //////    //////    // //    ////
// //  //  // //  //////  //        //        //  //  // //
// //   ////  //      //  //        //        //   ////  //
// //    //   //  //////  //        ////////  //    //   //
// Send contributions to the effective coefficients computed by the current process to the main process
//
//
// Compatible only with the parallel version
//
//
// Variables not defined in this script /////////////////////////////////
// - useVc -- (int) indicates whether the correctors for constants are to be used
// - useB -- (int) indicates whether bubbles are to be used
// - testMS -- (int) indicates whether test functions are multiscale or P1
// - [/i]fH, [/i]fB, [/i]fH[/x/y]TestMS[/supg] -- (VH0) effective terms
// - stabilization -- (int) indicates whether or not stabilization terms are used
////////////////////////////////////////////////////////////////////////


if (useB) { 
    if (treatB=="out_system") mpiReduce(ifH[], fH[], processor(0,comm), mpiSUM);
    else mpiReduce(ifB[], fB[], processor(0,comm), mpiSUM);
}

if(testMS==1) {
    mpiReduce(ifHxTestMS[], fHxTestMS[], processor(0,comm), mpiSUM);
    mpiReduce(ifHyTestMS[], fHyTestMS[], processor(0,comm), mpiSUM);
    if (useVc) mpiReduce(ifHTestMS[], fHTestMS[], processor(0,comm), mpiSUM);
    if (stabilization==1) {
        mpiReduce(ifHxTestMSsupg[], fHxTestMSsupg[], processor(0,comm), mpiSUM);
        mpiReduce(ifHyTestMSsupg[], fHyTestMSsupg[], processor(0,comm), mpiSUM);
        if (useVc) mpiReduce(ifHTestMSsupg[], fHTestMSsupg[], processor(0,comm), mpiSUM);
    }
}