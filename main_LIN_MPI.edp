// main_LIN_MPI.edp
//
// run with   mpirun -np [number_of_processes] FreeFem++-mpi main_LIN_MPI.edp -o [offline_mode]
//              (or a variant depending on local installation of mpi, FreeFem)
//            -o specifies the option for the offline stage: either "compute" (default) or "load"
// The user must ensure at all times that the appropriate mode is used for correct results
//
////// Parallel version ////////////////////////////////////////////////


// Initialization
string bcType = "Lin"; //type of boundary condtitions, relevant for the macroscopic problem
string name = bcType; //abbreviation used for the MsFEM output
string nameMPI = "_MPI"; //added to name later, indicating usage of parallel code
// MPI setup
mpiComm comm(mpiCommWorld,0,0);
int nbproc = mpiSize(comm); //number of processes in parallel
int iproc = mpiRank(comm); //current process

include "msfem_blocks/init.idp"
fespace VH(TH,P1); //coarse global FE conforming P1 space

// Offline stage
if (offlineMode == "compute") 
{
    int countOffline=0; //counter for the number of triangles treated in the offline stage on the current process
    for(int i=0; i<VH0.ndof; i++) 
    {
        if (iproc == i%nbproc) 
        {
            if (i%(2*n)==0) {cout <<"construction ms coefficients on tri "<<i<<endl;}
            if (osCoef < osThr) 
            {//oversampling is used iff osCoef is larger than osThr
                localProblemsLIN(i,countOffline)
            } 
            else 
            { //OS case
                localProblemsLINOS(i,countOffline)
            }
            if (debug) if (i%(2*n)==0) cout << endl;
            countOffline++;
        }
    }
    // Send all information for the global problem to the main process
    offlineEffectiveTensorsReduceMPI
    // Save effective coefficients (for the entire coarse mesh)
    // Also save the Vc pattern over all coarse mesh elements
    offlineSaveEffectiveTensors
    mpiBarrier(comm);
    if (iproc==0) printTime("Offline phase (computing + storing) lasted ")
} 
else if (offlineMode == "load") 
{
    offlineLoad
    mpiBarrier(comm);
}

// Online stage
VH uH=0; //the global problem is formulated on a standard FE P1-basis
VH0 uB=0; //coefficients to be used for the bubble function per mesh element
solveGlobalProblem(uH,uB)

mpiBarrier(comm); //only the main process computes the solution
if (iproc==0) { 
    for (int i=1; i<nbproc; i++) { //send the coarse scale solution to the other processes
        Send(processor(i,comm), uH[]);
        Send(processor(i,comm), uB[]);
    }
}
//mpiBarrier(comm); //THIS BARRIER MUST NOT BE USED
if (iproc>0) {
    Recv(processor(0,comm), uH[]); //the other processes receive the coarse scale solution
    Recv(processor(0,comm), uB[]);
}

// Post-processing
postReconstructionErrorMPI(uH,uB) //error computation
postCoarseError(uH) //error computation of projections on the coarse space