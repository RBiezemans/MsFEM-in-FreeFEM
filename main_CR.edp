// main_CR.edp
//
// run with   FreeFEM++ main_CR.edp -o [offline_mode]
//            -o specifies the option for the offline stage: either "compute" or "load"
// The user must ensure at all times that the appropriate mode is used for correct results
//
// Computation of a numerical approximation to the PDE defined in init.idp
// by the adv-MsFEM-CR method
//
// Sequential version
//
// Parameters are read from parameters.txt
//
// 
// This file INCLUDES
// - init.idp to read parameters and initialize all objects needed for the MsFEM
// - tools_CR_and_OS.idp for local_problems_LIN.idp to be included properly
// - local_problems_CR.idp to execute local computations for the adv-MsFEM-CR..
//   ..(numerical correctors and bubble functions) on a single coarse mesh element
// - offline_effective_tensors.idp to compute the effective coefficients on a..
//   ..single coarse mesh element
// - offline_effective_tensors_save.idp to save the effective coefficient
// - offline_load.idp to replace the offline phase if it can be preloaded
// - post.idp to create the output (reconstrucing the fine scale solution,.. 
//   ..saving the coarse solution, reconstructed solution, errors)
//
// This file CREATES for later use in the MsFEM:
//  uH -- the P1 Crouzeix-Raviart solution to the effective macroscopic problem


// INITIALIZATION
string name = "CR"; //accronyme for the adv-MsFEM-CR

int nbproc=1; //defined for compatibility with init.idp, that is also compatible with parallel computations

include "msfem_blocks/init.idp"
// Build directories to save the results from the upcoming offline phase
{
    string createDir = "mkdir -p " + output;
    exec(createDir); //directory where all output is stored
    createDir = "mkdir -p " + basisDir;
    exec(createDir); //directory to store numerical correctors and bubble functions
    createDir = "mkdir -p " + coeffDir;
    exec(createDir); //directory to store the effective coefficients for the MsFEM
}

include "msfem_blocks/tools_CR_and_OS.idp" 
//load some functions and macros for the construction of multiscale CR elements


// OFFLINE PHASE
// Computation of numerical correctors and bubble functions per coarse mesh element
// VH0 is the P0 space on the coarse mesh -- created in init.idp
// Data structures storeVx, storeVy, store B were created in init.idp
if (offlineMode == "compute") {
    for(int i=0; i<VH0.ndof; i++) {
        cout <<"construction ms coefficients on tri "<<i<<endl;
        phi[][i]=2; //created in init.idp -- used to loop over the coarse mesh elements

        include "msfem_blocks/local_problems_CR.idp" //compute numerical correctors, bubble functions on K
        // Saving (internally) the offline computations on K
        storeVx(i,:)=Vx[]; storeVy(i,:)=Vy[]; if (useB) storeB(i,:)=B[];
        include "msfem_blocks/offline_effective_tensors.idp" //compute effective coefficient on K

        if (debug) cout << endl;
        phi[][i]=0;
    }
    include "msfem_blocks/offline_effective_tensors_save.idp" //save effective coefficient (for the entire coarse mesh)
} else if (offlineMode == "load") {
    include "msfem_blocks/offline_load.idp"
}


// ONLINE PHASE -- solving the effective problem
fespace VH(TH,P1nc); //coarse global FE space 
VH uH,vH; //the global problem is formulated on a standard P1 Crouzeix-Raviart basis
solve PbGlob(uH,vH)= effectiveVar(uH,vH) + int1d(TH,qfe=qf1pE)(tgv*uH*vH);
// BC need to be set depending on the type of FE used (P1 Crouzeix-Ravairt here, nonconforming)
// Note 1: the bounadry condition is set here at the midpoints of the boundary edges only:..
// ..the Dirichlet boundary condition is set only in the weak (average) sense. 
// Note 2: classical Dirichlet conditions are too strong for the problem to be well-posed
if (plots) plot(uH,value=1,wait=1,cmm="HMM solution");


// POST-PROCESSING -- reconstruction, error computation, documentation
include "msfem_blocks/post.idp"
