// main_CR.edp
//
// run with   FreeFem++ main_CR.edp -o [offline_mode]
//            -o specifies the option for the offline stage: either "compute" (default) or "load"
// The user must ensure at all times that the appropriate mode is used for correct results
//
// Computation of a numerical approximation to the PDE defined in init.idp
// by the MsFEM-CR method based on the "vffile.idp" for local and global problems
// -- Over-sampling is used if the parametervalue osCoef is larger than osThr
// -- Bubble functions can be added to or omitted from the approximation space, and can be 
//    included in the linear system or carry the average of fRHS as coefficient.
//
// Parameters are read from parameters.txt
// Local and global variational forms are read from vffile.idp
//
// 
////// Sequential version ////////////////////////////////////////////
//
//
// Global variables declared in this script ////////////////////////////
// - (string)  bcType -- a string to set the correct boundary conditions in the macroscopic problem (Lin/CR) 
// - (string)  name -- abbreviation for  MsFEM underlying affine space
// - (string)  nameMPI -- must be empty for sequential script; "_MPI" for parallel script
// - (int)     iproc -- index of the current process (always 0 for sequential script)
// - (int)     nbproc -- number of processes (always 1 for sequential script)
// - (fespace) VH -- the relevant P1 space for the macroscopic problem
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
// INITIALIZATION                                                    //
// (msfem_blocks/init.idp)                                           //
///////////////////////////////////////////////////////////////////////
string bcType = "CR"; //type of boundary condtitions, relevant for the macroscopic problem
string name = bcType; //abbreviation used for the MsFEM output
string nameMPI = ""; //nothing is added to name later, indicating no usage of parallel code

int iproc=0, nbproc=1; //defined for compatibility with init.idp, that is also compatible with parallel computations
macro mpiReduce(a,b,c,d) cout << "WARNING: mpiReduce was erroneously called with sequential MsFEM" << endl //EOM 
    //defined for compatibility with the parallel version in the offline loading stage

include "msfem_blocks/init.idp"


///////////////////////////////////////////////////////////////////////
// OFFLINE STAGE                                                     //
// (msfem_blocks/local_problems_CR[_OS].idp                          //
//  or msfem_blocks/offline_load.idp)                                //
// (msfem_blocks/offline_effective_tensors.idp)                      //
// (msfem_blocks/offline_save_effective_tensors.idp)                 //
///////////////////////////////////////////////////////////////////////
// -- Computation of numerical correctors V[c/x/y] and bubble function B per coarse mesh element
// -- The discrete RHS is also computed via the inclusion of msfem_blocks/offline_effective_RHS.idp in the files for the offline stage
// -- Data structures storeVx, storeVy, store B are declared in init.idp
int countOffline=0; //to count the number of triangles treated for compatibility with parallel offline_load.idp
if (offlineMode == "compute") 
{
    for(int i=0; i<VH0.ndof; i++) {
        if (i%(2*n)==0) {
            cout <<"construction ms coefficients on tri "<<i<<endl;
        }
        phi[][i]=2; //initialized in init.idp -- used to loop over the coarse mesh elements

        if (osCoef < osThr) {//oversampling is used iff osCoef is larger than osThr
            localProblemsCR(i,i)
        } else { //OS case
            localProblemsCROS(i,i)
        }

        if (debug) if (i%(2*n)==0) cout << endl;
        phi[][i]=0;
    }
    offlineEffectiveTensorsReduce //compatibility with parallel version
    offlineSaveEffectiveTensors //save effective coefficients (for the entire coarse mesh)
    //also save the Vc pattern over all coarse mesh elements
    printTime("Offline phase (computing + storing) lasted ")
} 
else if (offlineMode == "load") 
{
    offlineLoad 
}


///////////////////////////////////////////////////////////////////////
// ONLINE STAGE                                                      //
// (msfem_blocks/online.idp                                          //
// (msfem_blocks/post_coarse_error.idp)                              //
// (msfem_blocks/write_results.idp)                                  //
///////////////////////////////////////////////////////////////////////
// -- Solving the effective problem  
fespace VH(TH,P1nc); //coarse global FE Crouzeix-Raviart space 
VH uH=0; //the global problem is formulated on a standard FE P1-basis
VH0 uB=0; //coefficients to be used for the bubble function per mesh element
solveGlobalProblem(uH,uB)


///////////////////////////////////////////////////////////////////////
// POST-PROCESSING                                                   //
// (msfem_blocks/post.idp)                                           //
///////////////////////////////////////////////////////////////////////
// -- Reconstruction, error computation, documentation
postReconstructionError(uH,uB)
postCoarseError(uH)
