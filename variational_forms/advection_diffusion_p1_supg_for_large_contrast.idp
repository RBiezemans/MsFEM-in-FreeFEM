// define here a "vffile.idp" -->
//
// Complete the following definitions to determine the MsFEM method you wish to use
// This can be done in terms of the following macros that are defined in init.idp
// in terms of the scalar coefficients nu (diffusion), b[x/y] (advection) and sigma (reaction):
// - adif(u,v) (dx(u)*dx(v)*nu+dy(u)*dy(v)*nu) -- diffusion terms
// - aadv(u,v) ( v*(  bx*dx(u)+by*dy(u) ) ) -- advection terms
// - aadvAdj(u,v) ( u*(  bx*dx(v)+by*dy(v) ) ) -- adjoint advection terms
// - amass(u,v) (u*v*sigma) -- reaction term
// - asupg(u,v) (tau*( (bx*dx(u)+by*dy(u))*(bx*dx(v)+by*dy(v)) )) -- stabilization terms
//   When stabilization is used in the formulation of the macroscopic P1 method, one has to
//   - set the variable 'stabilization' to 1 to activate stabilization terms on the RHS of the scheme
//   - define the values of the parameter tau (of type VH0, i.e. piecewise constant) cell by cell
//   - put a description of the choice of stabilization parameter in the variable 'stabExpression'
//////////////////////////////////////////////////////////////////////// 

// advection_diffusion_p1_supg_for_large_contrast.idp
// resolution of the advection-diffusion equation 
// the basis functions resolve only the diffusion terms
// the effective scheme is stabilized by SUPG, assuming that diffusion
//  is in fact resolved exactly (instead of on a discrete mesh only)

////////////////////////////////////////////////////////////////////////
// Results are stored in the directory results_[vfname]               //
////////////////////////////////////////////////////////////////////////
vfname = "adv_diffusion_P1_SUPG";

////////////////////////////////////////////////////////////////////////
// aComplete defines the terms under the integral of the bilinear     //
//  form for the macroscopic P1 scheme                                //
////////////////////////////////////////////////////////////////////////
stabilization=1;
VH0 bx0=bx; //interpolation at the barycentre
VH0 by0=by; //interpolation at the barycentre
// Computation of the stabilization parameter in each macroscopic mesh cell
for (int i=0; i<VH0.ndof; i++) {
    phi[][i]=2;

    mesh K = trunc(TH,phi>1,split=1,label=1);
    real bxK = bx0[][i];
    real byK = by0[][i];
    real bK = sqrt(bxK^2+byK^2);
    
    fespace VK(K,P1);
    VK psi=0;
    real sumdphi=0;
    for(int j=0; j<VK.ndof; j++) {
        psi[][j]=1.;
        sumdphi += abs(bxK*dx(psi) + byK*dy(psi));
        psi[][j]=0.;
    }
    real diamK = 2.*bK/sumdphi; 
    real PeK = bK*diamK*0.5/(cont/2.*alpha);
    real tauK = cosh(PeK)/sinh(PeK) - 1./PeK; 
    tauK = tauK*0.5*diamK/bK; 
    tau[][i] = tauK;

    phi[][i]=0;
}
stabExpression = "-- Stabilization parameter = cotangent formula + b-diameter of K + alpha=50*value in PDE --";
macro aComplete(u,v) (adif(u,v) + aadv(u,v) + asupg(u,v))// EOM

////////////////////////////////////////////////////////////////////////
// aBasis defines the terms under the integral of the bilinear form   //
//  that defines the PDE for the basis functions (local problems)     //
//  Unused for P1                                                     //
////////////////////////////////////////////////////////////////////////
macro aBasis(u,v) () // EOM

////////////////////////////////////////////////////////////////////////
// aref defines the terms under the integral of the bilinear form     //
//  that defines the reference solution                               //
////////////////////////////////////////////////////////////////////////
macro aref(u,v) (adif(u,v) + aadv(u,v))// EOM

////////////////////////////////////////////////////////////////////////
// aTest1 must provide those terms of aComplete(u,v) that do not      //
//  contain derivatives on the test function v                        //
////////////////////////////////////////////////////////////////////////
macro aTest1(u,v) aadv(u,v)// EOM

////////////////////////////////////////////////////////////////////////
// One may set useVc to 0 if aBasis(1,w)==0 for all test functions w  //
// One may set fullVF to 0 if one knows that the effective P1 scheme  //
//  only containts diffusion and advection terms                      //
// When omitted here, these variables default to 1 and may result in  //
//  the unnecessary computation of some terms that vanish             //
////////////////////////////////////////////////////////////////////////
useVc=0;
fullVF=0;
